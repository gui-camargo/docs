openapi: 3.0.0
info:
  title: Open Delivery Sandbox
  version: "v1.0.0"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  contact:
    url: https://www.opendelivery.org.br
    x-author: Guilherme Munhoz Camargo
  description: "Ambiente Sandbox para testes do Open Delivery"

#############################################################

tags:
  # Orders Tags
  - name: "Sandbox"
    description: "Sandbox exclusive endpoints not present in the official Open Delivery documentation. \n\nThese endpoints should be used to **SIMULATE** actions that would be performed by the **`Ordering Application`**."
  - name: "Events"
    description: "Endpoints related to Orders Events Reception.\n\n**See:** [Orders - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersPolling)"
  - name: "Orders"
    description: "Endpoints related to Orders actions.\n\n**See:** [Orders - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersSection)"

  - name: "Sandbox Logistics"
    description: |-
      Sandbox exclusive endpoints not present in the official Open Delivery documentation. 

      These endpoints should be used to **SIMULATE** actions that would be performed by the **`Logistics Service`**.

  - name: "Logistics"
    description: |-
      This section covers the API referring to the operations with **Logistic Services**.

      **See:** [Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/logisticsSection)

security:
  - OAuth2: [od.all]

servers:
  - url: https://localhost:5000/api/v1

paths:
  # Orders

  /sandbox/registration:
    put:
      operationId: "sandboxRegister"
      summary: "Register the merchantId and set Event reception mode."
      description: |-
        Register the `merchantId` and set how you want to receive the order Events. 

        At this time, only reception via `POLLING` is accepted.

        **IMPORTANT**: Following the Open Delivery API docs, only **1** `merchantId` can be registed per `clientId`.

        **_Source_**: [https://abrasel-nacional.github.io/docs/#tag/authentication](https://abrasel-nacional.github.io/docs/#tag/authentication)
      tags:
        - "Sandbox"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SandboxRegister"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SandboxRegister"
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SandboxRegister"
        "204":
          description: "No content."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "409":
          $ref: "#/components/responses/Conflict"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    get:
      operationId: "sandboxGetRegistration"
      summary: "Get the registered Merchant and Event reception mode."
      description: |-
        Get the registered Merchant and Event reception mode.
      tags:
        - "Sandbox"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/SandboxRegister"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders:
    post:
      operationId: sandboxPostOrder
      tags:
        - "Sandbox"
      summary: "Post a new Order"
      description: |-
        Posts a new order for the registered merchant.

        The **Software Service** will receive an `CREATED` event after this action.
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: "Created"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders/{orderId}/conclude:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order."
      tags:
        - "Sandbox"
      operationId: "sandboxConcludeOrder"
      summary: "Forcibly Concludes an order in progress."
      description: |-
        Concludes an order in progress. 

        This will override whatever status the order is in and change it to **`CONCLUDED`**.

        The **Software Service** will receive an `CONCLUDED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders/{orderId}/sendCancellationRequest:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SendCancelRequest"
      tags:
        - "Sandbox"
      operationId: "sandboxSendCancellationRequest"
      summary: "Send a order cancellation request to the Merchant"
      description: |-
        This endpoint simulates a cancellation request from the **Ordering Application** to the **Software Service**. 

        The **Software Service** will receive an `ORDER_CANCELLATION_REQUESTED` event after this action.

        Then the **Software Service** is expected to call one of the two endpoints:

        `/orders/{orderId}/acceptCancellation` or `/orders/{orderId}/denyCancellation`
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntityOrderCancellation"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders/{orderId}/acceptMerchantCancellation:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      tags:
        - "Sandbox"
      operationId: "sandboxMerchantCancellationAccepted"
      summary: "Accept a order cancellation request from the Merchant"
      description: |-
        This endpoint simulates the acceptance of a cancellation request originated by the **Software Service**. 

        The **Software Service** will receive a `CANCELLED` event after this action.
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been confirmed. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders/{orderId}/denyMerchantCancellation:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      tags:
        - "Sandbox"
      operationId: "sandboxMerchantCancellationDenied"
      summary: "Deny a order cancellation request from the Merchant"
      description: |-
        This endpoint simulates the denial of a cancellation request originated by the **Software Service**. 

        The **Software Service** will receive a `CANCELLATION_REQUEST_DENIED` event after this action.
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been denied. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/orders/{orderId}/cancel:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order."
      tags:
        - "Sandbox"
      operationId: "sandboxCancelOrder"
      summary: "Forcibly cancel an order in progress."
      description: |-
        Cancels an order in progress. 

        This will override whatever status the order is in and change it to **`CANCELLED`**.

        The **Software Service** will receive an `CANCELLED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/logistics/event/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order."
        - name: eventType
          in: "query"
          required: true
          schema:
            type: string
            description: "The event being triggered."
            enum:
              - ACCEPTED
              - REJECTED
              - PICKUP_ONGOING
              - ARRIVED_AT_MERCHANT
              - ORDER_PICKED
              - DELIVERY_ONGOING
              - ARRIVED_AT_CUSTOMER
              - ORDER_DELIVERED
              - RETURNING_TO_MERCHANT
              - RETURNED_TO_MERCHANT
              - DELIVERY_FINISHED
              - CANCELLED
      tags:
        - "Sandbox Logistics"
      operationId: "sandboxLogisticsSendEvent"
      summary: "Send new events to tracking webhook"
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/logistics/accept/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "Accepts a new delivery request."
      tags:
        - "Sandbox Logistics"
      operationId: "sandboxLogisticsAcceptOrder"
      summary: "Send new events to tracking webhook"
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /sandbox/logistics/reject/{orderId}:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "Rejects a new delivery request."
      tags:
        - "Sandbox Logistics"
      operationId: "sandboxLogisticsRejectOrder"
      summary: "Send new events to tracking webhook"
      description: ""
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryEventDenied"
      responses:
        "200":
          description: "OK"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderEvent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}:
    get:
      parameters:
        - name: "orderId"
          required: true
          in: "path"
          schema:
            type: "string"
            format: "uuid"
      tags:
        - "Orders"
      operationId: orderDetails
      summary: "Get Order Details"
      description: |-
        Endpoint to consult the full details of an order.
      responses:
        "200":
          description: "Order returning success."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Order"
              # examples:
              #   orderExample:
              #     $ref: "#/components/examples/orderExample"
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/confirm:
    post:
      parameters:
        - name: "orderId"
          required: true
          in: "path"
          schema:
            type: "string"
            format: "uuid"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/OrderConfirmed"
      tags:
        - "Orders"
      operationId: confirmOrder
      summary: "Confirm"
      description: |-
        Confirms receipt of order.

        It is expected to receive a `CONFIRMED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/readyForPickup:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      tags:
        - "Orders"
      summary: "Ready For Pickup"
      operationId: "orderReady"
      description: |-
        Indicates that the order is ready for pickup.

        It is expected to receive a `READY_FOR_PICKUP` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/dispatch:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/OrderDispatched"
      tags:
        - "Orders"
      operationId: "dispatchOrder"
      summary: "Dispatch"
      description: |-
        Indicates that the order has been dispatched.

        It is expected to receive a `DISPATCHED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/delivered:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      tags:
        - "Orders"
      operationId: "orderDelivered"
      summary: "Delivered"
      description: |-
        Indicates that the order has been delivered.

        It is expected to receive a `DELIVERED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/requestCancellation:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RequestCancelled"
      tags:
        - "Orders"
      operationId: "requestCancellation"
      summary: "Request order cancellation"
      description: |-
        Requests an order cancellation.
                
        It is expected to receive a `CANCELATTION_REQUESTED` event after this action.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntityOrderCancellation"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/acceptCancellation:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      tags:
        - "Orders"
      operationId: "cancellationAccepted"
      summary: "Accept order cancellation"
      description: |-
        Accepts the order cancellation request sent previously

        It is expected to receive a `CANCELLED` event after this action.
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been confirmed. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /orders/{orderId}/denyCancellation:
    post:
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: "string"
            format: "uuid"
            description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      requestBody:
        description: "Request for order cancellation has been denied."
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RequestDenied"
      tags:
        - "Orders"
      operationId: "cancellationDenied"
      summary: "Deny order cancellation"
      description: |-
        Denies the order cancellation request sent previously

        It is expected to receive a `CANCELLATION_DENIED` event after this action.
      responses:
        "200":
          description: Status 200 available for compatibility reasons. Please use status 204 instead.
        "204":
          description: Order cancellation has been denied. No response content.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Events

  "/events:polling":
    get:
      operationId: pollingEvents
      parameters:
        - name: "x-polling-merchants"
          in: "header"
          schema:
            type: array
            description: |-
              Subset of merchants to fetch events from. Must either be omitted or non-empty.
              > At this time, this field will only return data from the authenticated merchant, since authentication occurs per merchant and not per application. This field may be used in future versions.
            items:
              type: string
              description: Ids of the merchants
          style: simple
        - name: "eventType"
          in: "query"
          schema:
            type: array
            description: |-
              Events Types
            items:
              type: "string"
              description: "The event type."
              enum:
                - "CREATED"
                - "CONFIRMED"
                - "DISPATCHED"
                - "READY_FOR_PICKUP"
                - "PICKUP_AREA_ASSIGNED"
                - "DELIVERED"
                - "CONCLUDED"
                - "CANCELLATION_REQUESTED"
                - "CANCELLATION_REQUEST_DENIED"
                - "CANCELLED"
                - "ORDER_CANCELLATION_REQUEST"
                - "CANCELLATION_DENIED"

      tags:
        - "Events"
      summary: "Get New Events"
      description: |-
        Polls events for any orders from merchants associated with the authenticated user.  
        Each event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests.
      responses:
        "200":
          description: "Successful returns list of polled events ."
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
                maxItems: 50
        "204":
          description: "No content."
        "400":
          $ref: "#/components/responses/BadRequest"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /events/acknowledgment:
    post:
      requestBody:
        required: true
        content:
          "application/json":
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/AckEvents"
      tags:
        - "Events"
      operationId: pollingAcknowledgment
      summary: "Acknowledge Events"
      description: |-
        Acknowledge a set of events, dismissing them from future polling calls.
      responses:
        "202":
          $ref: "#/components/responses/Accepted"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # Logistics

  /logistics/delivery:
    post:
      operationId: "logisticsNewDelivery"
      security:
        - OAuth2: [od.all]
      requestBody:
        description: "Request for a new delivery order"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryOrder"
      tags:
        - "Logistics"
      summary: "Request new delivery"
      description: "Starts the process of calling a new delivery for an order."
      responses:
        "202":
          description: "Request has been accepted for processing."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryOrderResponse"

        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /logistics/orderPicked/{orderId}:
    post:
      operationId: "logisticsPicked"
      security:
        - OAuth2: [od.all]
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: string
            format: "uuid"
            description: "The orderId generated by the **`Ordering Application`**."
            example: "52122852-6626-11ed-9022-0242ac120002"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryOrderPicked"
      tags:
        - "Logistics"
      summary: "Inform order pickup"
      description: "Inform the **Logistic Service** that the order was picked by delivery person at Merchant"
      responses:
        "200":
          description: "Order pickup has been confirmed."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /logistics/finishDelivery/{orderId}:
    post:
      operationId: "logisticsFinish"
      security:
        - OAuth2: [od.all]
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: string
            format: "uuid"
            description: "The orderId generated by the **`Ordering Application`**."
            example: "52122852-6626-11ed-9022-0242ac120002"
      requestBody:
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryOrderFinish"
      tags:
        - "Logistics"
      summary: "Finish delivery"
      description: "Indicates the completion of a delivery order"
      responses:
        "200":
          description: "Delivery completion has been confirmed. "
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /logistics/handleProblem/{orderId}:
    post:
      operationId: "logisticsProblem"
      security:
        - OAuth2: [od.all]
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: string
            format: "uuid"
            description: "The orderId generated by the **`Ordering Application`**."
            example: "52122852-6626-11ed-9022-0242ac120002"
      requestBody:
        description: "Request has been accepted for processing."
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryHandleProblem"
      tags:
        - "Logistics"
      summary: "Handle problem"
      description: |-
        Handle problems that may occur during the delivery.

        > Problems can occur at any time during a delivery in progress.  
        It is important that the **Logistic Service** always informs the **Software Service** (or **Ordering Application**) of a problem (via webhook), even if the problem does not require any action by the merchant to solve it.

        > Since there are other ways to solve delivery problems, such as via telephone or messaging applications, the implementation of this endpoint is optional, and the **Logistic Service** will inform the **Software Service** (or **Ordering Application**) of the need to use it.
        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/logisticsProblem.png" />
        </div>
      responses:
        "200":
          description: "The problem has been addressed."
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  /logistics/cancel/{orderId}:
    post:
      operationId: "logisticsCancel"
      security:
        - OAuth2: [od.all]
      parameters:
        - name: orderId
          in: "path"
          required: true
          schema:
            type: string
            format: "uuid"
            description: "The orderId generated by the **`Ordering Application`**."
            example: "52122852-6626-11ed-9022-0242ac120002"
      requestBody:
        description: "Request has been accepted for processing."
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/DeliveryCancel"
      tags:
        - "Logistics"
      summary: "Cancel delivery"
      description: |-
        Requests cancellation of a order delivery in progress

        > The **Software Service** (or **Ordering Application**) may request to cancel the delivery of an order at any time.  
        Depending on **Logistic Service** policies, additional fees may apply.

        > If the order being cancelled is in a combined delivery, when cancelling, the order informed will be unlinked from the delivery, not interrupting the progress of the other orders in the same delivery.

        <div align="center">
          <img src="https://abrasel-nacional.github.io/docs/images/logisticsCancel.png" />
        </div>
      responses:
        "202":
          description: "Cancel request has been accepted for processing."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/DeliveryCancelResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AccessDenied"
        "404":
          $ref: "#/components/responses/NotFound"
        "422":
          $ref: "#/components/responses/UnprocessableEntity"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"

  # /v1/logistics/delivery/{orderId}:
  #   get:
  #     operationId: logisticDetails
  #     security:
  #       - OAuth2: [od.all]
  #     parameters:
  #       - name: orderId
  #         in: "path"
  #         required: true
  #         schema:
  #           type: string
  #           format: "uuid"
  #           description: "The orderId generated by the **`Ordering Application`**."
  #           example: "52122852-6626-11ed-9022-0242ac120002"
  #     tags:
  #       - "logisticDetails"
  #     summary: "Get delivery details"
  #     description: |-
  #       Gets detailed information about the delivery order.

  #       > Since the same `orderId` may have more than one return (considering that it may have been rejected a few times before being accepted), then the response should return only the last attempt processed by the **Logistics Service**, be it an acceptance or a rejection.
  #     responses:
  #       "200":
  #         description: "Successfully returns the delivery order details."
  #         content:
  #           "application/json":
  #             schema:
  #               $ref: "#/components/schemas/DeliveryOrderDetails"
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "404":
  #         $ref: "#/components/responses/NotFound"
  #       "503":
  #         $ref: "#/components/responses/ServiceUnavailable"

  # /v1/logistics/orderPicked/{orderId}:
  #   post:
  #     operationId: "logisticsPicked"
  #     security:
  #       - OAuth2: [od.all]
  #     parameters:
  #       - name: orderId
  #         in: "path"
  #         required: true
  #         schema:
  #           type: string
  #           format: "uuid"
  #           description: "The orderId generated by the **`Ordering Application`**."
  #           example: "52122852-6626-11ed-9022-0242ac120002"
  #     requestBody:
  #       content:
  #         "application/json":
  #           schema:
  #             $ref: "#/components/schemas/DeliveryOrderPicked"
  #     tags:
  #       - "logisticOrder"
  #     summary: "Inform order pickup"
  #     description: "Inform the **Logistic Service** that the order was picked by delivery person at Merchant"
  #     responses:
  #       "200":
  #         description: "Order pickup has been confirmed."
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "401":
  #         $ref: '#/components/responses/Unauthorized'
  #       "403":
  #         $ref: "#/components/responses/AccessDenied"
  #       "404":
  #         $ref: "#/components/responses/NotFound"
  #       "422":
  #         $ref: "#/components/responses/UnprocessableEntity"
  #       "503":
  #         $ref: "#/components/responses/ServiceUnavailable"

  # /v1/logistics/finishDelivery/{orderId}:
  #   post:
  #     operationId: "logisticsFinish"
  #     security:
  #       - OAuth2: [od.all]
  #     parameters:
  #       - name: orderId
  #         in: "path"
  #         required: true
  #         schema:
  #           type: string
  #           format: "uuid"
  #           description: "The orderId generated by the **`Ordering Application`**."
  #           example: "52122852-6626-11ed-9022-0242ac120002"
  #     requestBody:
  #       content:
  #         "application/json":
  #           schema:
  #             $ref: "#/components/schemas/DeliveryOrderFinish"
  #     tags:
  #       - "logisticOrder"
  #     summary: "Finish delivery"
  #     description: "Indicates the completion of a delivery order"
  #     responses:
  #       "200":
  #         description: "Delivery completion has been confirmed. "
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "401":
  #         $ref: '#/components/responses/Unauthorized'
  #       "403":
  #         $ref: "#/components/responses/AccessDenied"
  #       "404":
  #         $ref: "#/components/responses/NotFound"
  #       "422":
  #         $ref: "#/components/responses/UnprocessableEntity"
  #       "503":
  #         $ref: "#/components/responses/ServiceUnavailable"

  # /v1/logistics/handleProblem/{orderId}:
  #   post:
  #     operationId: "logisticsProblem"
  #     security:
  #       - OAuth2: [od.all]
  #     parameters:
  #       - name: orderId
  #         in: "path"
  #         required: true
  #         schema:
  #           type: string
  #           format: "uuid"
  #           description: "The orderId generated by the **`Ordering Application`**."
  #           example: "52122852-6626-11ed-9022-0242ac120002"
  #     requestBody:
  #       $ref: "#/components/requestBodies/DeliveryHandleProblem"
  #     tags:
  #       - "logisticOrder"
  #     summary: "Handle problem"
  #     description: |-
  #       Handle problems that may occur during the delivery.

  #       > Problems can occur at any time during a delivery in progress.
  #       It is important that the **Logistic Service** always informs the **Software Service** (or **Ordering Application**) of a problem (via webhook), even if the problem does not require any action by the merchant to solve it.

  #       > Since there are other ways to solve delivery problems, such as via telephone or messaging applications, the implementation of this endpoint is optional, and the **Logistic Service** will inform the **Software Service** (or **Ordering Application**) of the need to use it.
  #       <div align="center">
  #         <img src="https://abrasel-nacional.github.io/docs/images/logisticsProblem.png" />
  #       </div>
  #     responses:
  #       "200":
  #         description: "The problem has been addressed."
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "401":
  #         $ref: '#/components/responses/Unauthorized'
  #       "403":
  #         $ref: "#/components/responses/AccessDenied"
  #       "404":
  #         $ref: "#/components/responses/NotFound"
  #       "422":
  #         $ref: "#/components/responses/UnprocessableEntity"
  #       "503":
  #         $ref: "#/components/responses/ServiceUnavailable"

  # /v1/logistics/cancel/{orderId}:
  #   post:
  #     operationId: "logisticsCancel"
  #     security:
  #       - OAuth2: [od.all]
  #     parameters:
  #       - name: orderId
  #         in: "path"
  #         required: true
  #         schema:
  #           type: string
  #           format: "uuid"
  #           description: "The orderId generated by the **`Ordering Application`**."
  #           example: "52122852-6626-11ed-9022-0242ac120002"
  #     requestBody:
  #       $ref: "#/components/requestBodies/DeliveryCancel"
  #     tags:
  #       - "logisticOrder"
  #     summary: "Cancel delivery"
  #     description: |-
  #       Requests cancellation of a order delivery in progress

  #       > The **Software Service** (or **Ordering Application**) may request to cancel the delivery of an order at any time.
  #       Depending on **Logistic Service** policies, additional fees may apply.

  #       > If the order being cancelled is in a combined delivery, when cancelling, the order informed will be unlinked from the delivery, not interrupting the progress of the other orders in the same delivery.

  #       <div align="center">
  #         <img src="https://abrasel-nacional.github.io/docs/images/logisticsCancel.png" />
  #       </div>
  #     responses:
  #       "202":
  #         description: "Cancel request has been accepted for processing."
  #         content:
  #           "application/json":
  #             schema:
  #               $ref: "#/components/schemas/DeliveryCancelResponse"
  #       "400":
  #         $ref: "#/components/responses/BadRequest"
  #       "401":
  #         $ref: '#/components/responses/Unauthorized'
  #       "403":
  #         $ref: "#/components/responses/AccessDenied"
  #       "404":
  #         $ref: "#/components/responses/NotFound"
  #       "422":
  #         $ref: "#/components/responses/UnprocessableEntity"
  #       "503":
  #         $ref: "#/components/responses/ServiceUnavailable"

#############################################################

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      description: "Oauth2 should be used for all API calls from the **`Software Service`** to the **`Ordering Application`**"
      flows:
        clientCredentials:
          tokenUrl: https://api.abrasel.com.br/dev.api/oauth2/v1/access-token
          scopes:
            od.all: "Access to all **Open Delivery** APIs"

  responses:
    Accepted:
      description: "Request has been accepted for processing."
    BadRequest:
      description: "Bad Request"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    NotFound:
      description: "The requested resource was not found."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Conflict:
      description: "The requested resource is already present."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: "Request lacks valid authentication credentials for the target resource"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    AccessDenied:
      description: "Authenticated participant request that violates some authorization rule."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntity:
      description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"
    UnprocessableEntityOrderCancellation:
      description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/CancellationError"
    ServiceUnavailable:
      description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Error"

  schemas:
    # Orders

    Order:
      type: "object"
      title: "Order"
      required:
        [
          id,
          "type",
          "displayId",
          "createdAt",
          "orderTiming",
          "preparationStartDateTime",
          "merchant",
          "items",
          "total",
          "payments",
        ]
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
        "type":
          type: "string"
          description: |-
            `DELIVERY` - for orders that will be delivered to the customer's address.  
            `TAKEOUT` - orders that will be picked up at the establishment by the customer  
            `INDOOR` - orders that will be consumed inside the establishment.

          enum:
            - "DELIVERY"
            - "TAKEOUT"
            - "INDOOR"
        displayId:
          type: "string"
          description: "Order Id shown in the **Ordering Application** interface for the customer."
        sourceAppId:
          type: "string"
          format: uuid
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        lastEvent:
          type: "string"
          description: "The last valid event polled (whether acknowledged or not) or sent via webhook. **[Click here](#operation/pollingEvents)** for definitions of each type."
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "DISPATCHED"
            - "READY_FOR_PICKUP"
            - "PICKUP_AREA_ASSIGNED"
            - "DELIVERED"
            - "CONCLUDED"
            - "CANCELLATION_REQUESTED"
            - "CANCELLATION_REQUEST_DENIED"
            - "CANCELLED"
            - "ORDER_CANCELLATION_REQUEST"
            - "CANCELLED_DENIED"
        orderTiming:
          type: "string"
          description: "Order Timing. Indicates whether the ORDER will have immediate or scheduled delivery."
          enum:
            - "INSTANT"
            - "SCHEDULED"
        preparationStartDateTime:
          type: "string"
          format: "date-time"
          description:
            "Suggestion for the preparation start time after Order creation. This can be used by the **Ordering Application** to inform the merchant to delay the start of the preparation for any reason. Default is the same time as the order creation time.
            \n\n(UTC date-time in ISO timestamp format)."
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        items:
          type: "array"
          description: "Order items."
          items:
            type: "object"
            required:
              [
                id,
                "name",
                "unit",
                "quantity",
                "unitPrice",
                "totalPrice",
                "externalCode",
              ]
            properties:
              id:
                type: "string"
                format: "uuid"
                description: "A unique identifier of the item."
              index:
                type: "integer"
                description: "Item's position."
              name:
                type: "string"
                description: "Product name"
              externalCode:
                type: "string"
                description: "External product code."
              unit:
                type: "string"
                description: |
                  Item's Unit of Measurement.

                  Possible values:  
                  - `UN` - Unit  
                  - `KG` - Kilogram  
                  - `L` - Liter  
                  - `OZ` - Ounce  
                  - `LB` - Pound  
                  - `GAL` - Gallon  

                  > Use fractional values for quantities smaller than the unit of measure:
                  > Example: 500 grams = 0.5 KG
                enum:
                  - "UN"
                  - "KG"
                  - "L"
                  - "OZ"
                  - "LB"
                  - "GAL"
                example: "KG"
              ean:
                type: "string"
                description: "EAN is the barcode standard used on items."
              quantity:
                type: "number"
                format: "double"
                description: |-
                  Amount of items.

                   > Use fractional values for quantities smaller than the unit of measure:
                   > Example: 500 grams = 0.5 KG
              specialInstructions:
                type: "string"
                description: "Special instructions about the items."
              unitPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Price per unit."
              optionsPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Pricing options."
              totalPrice:
                type: "object"
                description: Total Price of the item. (quantity * unitPrice + optionsPrice)
                allOf:
                  - $ref: "#/components/schemas/Price"
              options:
                type: "array"
                description: "Options related to the item."
                items:
                  type: "object"
                  required:
                    [
                      id,
                      "name",
                      "externalCode",
                      "unit",
                      "quantity",
                      "unitPrice",
                      "totalPrice",
                    ]
                  properties:
                    index:
                      type: "integer"
                      description: "Option's position."
                    id:
                      type: "string"
                      format: "uuid"
                      description: "A unique identifier of the item."
                    name:
                      type: "string"
                      description: "Options name"
                    externalCode:
                      type: "string"
                      description: "External product code."
                    unit:
                      type: "string"
                      description: "Measure unit of the item."
                    ean:
                      type: "string"
                      description: "EAN is the barcode standard used on items."
                    quantity:
                      type: "number"
                      format: "double"
                    unitPrice:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                      description: "Price per unit."
                    totalPrice:
                      type: "object"
                      description: Total Price of the option. (quantity * unitPrice)
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    specialInstructions:
                      type: "string"
                      description: "More instructions, if needed."
        otherFees:
          type: "array"
          description: "Other fees that may apply."
          items:
            type: "object"
            required: ["name", "type", "receivedBy", "price"]
            properties:
              name:
                type: "string"
                description: "Name related to the other fees."
              type:
                type: "string"
                enum:
                  - "DELIVERY_FEE"
                  - "SERVICE_FEE"
                  - "TIP"
              receivedBy:
                type: "string"
                enum:
                  - "MARKETPLACE"
                  - "MERCHANT"
                  - "LOGISTIC_SERVICES"
              receiverDocument:
                type: "string"
                description: "Mandatory for marketplace."
              price:
                type: "object"
                description: "The fee price"
                allOf:
                  - $ref: "#/components/schemas/Price"
              observation:
                type: "string"
                description: "Any extra comments."
        discounts:
          type: "array"
          description: "Any discounts that may apply."
          items:
            type: "object"
            required: ["amount", "target", "sponsorshipValues"]
            properties:
              amount:
                type: "object"
                description: Amount value of the discount.
                allOf:
                  - $ref: "#/components/schemas/Price"
              target:
                type: "string"
                enum:
                  - "CART"
                  - "DELIVERY_FEE"
                  - "ITEM"
              targetId:
                type: "string"
                description: "Only mandatory for `target` = `ITEM`."
              sponsorshipValues:
                description: "Values sponsored by either party. The sum of the amounts listed in this atribute must match the value informed in the `amount` atribute above."
                type: "array"
                items:
                  type: "object"
                  required: ["name", "amount"]
                  properties:
                    name:
                      type: "string"
                      enum:
                        - "MARKETPLACE"
                        - "MERCHANT"
                    amount:
                      type: "object"
                      description: Discount amount given by the sponsor.
                      allOf:
                        - $ref: "#/components/schemas/Price"
        total:
          type: "object"
          required: ["itemsPrice", "otherFees", "orderAmount", "discount"]
          description: "Set of fields with the sum of the values previously described in the order."
          properties:
            itemsPrice:
              type: "object"
              description: "Sum of the total price of the items listed in the `items` attribute."
              allOf:
                - $ref: "#/components/schemas/Price"
            otherFees:
              type: "object"
              description: "Sum of the total value of other fees listed in the `otherFees` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            discount:
              type: "object"
              description: "Sum of any discounts that may be listed in the `discounts` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            orderAmount:
              type: "object"
              description: "The final value of the order (itemsPrice + otherFees - discounts). "
              allOf:
                - $ref: "#/components/schemas/Price"
        payments:
          type: "object"
          required: ["prepaid", "pending", "methods"]
          description: "All the description of the payment, such as methods, pre-payments, change, etc."
          properties:
            prepaid:
              type: "number"
              format: "double"
              description: "Amount paid in advance."
            pending:
              type: "number"
              format: "double"
              description: "Amount that is still to be paid."
            methods:
              type: "array"
              description: "The payment method used. Whether it was online, on delivery, credit card, voucher, cash, etc."
              items:
                type: "object"
                required: ["value", "currency", "type", "method"]
                properties:
                  value:
                    type: "number"
                    format: "double"
                    description: "Price value. 4 doubles places are accepted"
                  currency:
                    type: "string"
                    pattern: "^[A-Z]{3}$"
                    description: "The 3-letter ISO 4217 currency code."
                    example: "BRL"
                  type:
                    type: "string"
                    description: "`PREPAID` if the payment was made through some platform, or `PENDING` if it going to be paid on delivery or in cash, for example."
                    enum:
                      - "PREPAID"
                      - "PENDING"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "DIGITAL_WALLET"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "COUPON"
                      - "REDEEM"
                      - "PREPAID_REDEEM"
                      - "OTHER"
                  brand:
                    type: string
                    description: |-
                      Indicates the brand of the card selected in the `method` field.

                      This field must only be filled in if `type` is `PREPAID` and `method` is `CREDIT`, `DEBIT`, `CREDIT_DEBIT`, `MEAL_VOUCHER` or `FOOD_VOUCHER`.

                      If `OTHER` is chosen, it is recommended that you describe the brand name in the `methodInfo` field.
                    enum:
                      - "VISA"
                      - "MASTERCARD"
                      - "DINERS"
                      - "AMEX"
                      - "HIPERCARD"
                      - "ELO"
                      - "AURA"
                      - "DISCOVER"
                      - "VR_BENEFICIOS"
                      - "SODEXO"
                      - "TICKET"
                      - "GOOD_CARD"
                      - "BANESCARD"
                      - "SOROCARD"
                      - "POLICARD"
                      - "VALECARD"
                      - "AGICARD"
                      - "JCB"
                      - "CREDSYSTEM"
                      - "CABAL"
                      - "GREEN_CARD"
                      - "VEROCHEQUE"
                      - "AVISTA"
                      - "OTHER"
                  methodInfo:
                    type: "string"
                    description: |-
                      Additional information regarding the payment method.  
                      It can be used to indicate some useful information of the chosen payment method, such as the name of the wallet, or an authorization number.  

                      This field can be used for any `method` entered, but it is highly recommended to fill it in when the chosen `method` is `OTHER`.
                  changeFor:
                    type: "number"
                    format: "double"
                    description: |-
                      Indicates the total that will be paid in cash by the customer and that should be considered for the calculation of the change   
                      (ex. customer will pay a $43 order with a $50 bill. Then 50.00 must be entered.). 

                      Only mandatory when `method` is `CASH`.
        customer:
          type: "object"
          required: [id, "phone", "name", "ordersCountOnMerchant"]
          description: "Customer related information."
          properties:
            id:
              type: "string"
              format: "uuid"
              description: "A unique identifier related to the consumer. If the Ordering Application does not have an Id for the customer, this Id can be generated when creating the order. "
            phone:
              type: "object"
              description: "Customer's phone. Here you can enter the customer's phone number directly (provided that the customer has given permission for this data to be shared, according to local policies) or another phone number (such as the ordering application's call center phone number) where the merchant can communicate about order issues that affect the customer (such as health issues)."
              required: ["number"]
              properties:
                number:
                  type: "string"
                extension:
                  type: "string"
            documentNumber:
              description: "Customer document. This document may be sent for dealing with tax issues."
              type: "string"
            name:
              type: "string"
              description: "Customer's name."
            email:
              description: "Customer email. This document may be sent for dealing with tax issues."
              type: "string"
            ordersCountOnMerchant:
              description: "Total number of orders that the customer already placed within the merchant."
              type: "number"
              format: "double"
        schedule:
          type: "object"
          description: "Information for scheduled orders. Required if `orderTiming` is `SCHEDULED`."
          required: ["scheduledDateTimeStart", "scheduledDateTimeEnd"]
          properties:
            scheduledDateTimeStart:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            scheduledDateTimeEnd:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        delivery:
          type: "object"
          description: "Information for DELIVERY orders. Required if the chosen `type` is `DELIVERY`."
          required:
            ["deliveredBy", "deliveryAddress", "estimatedDeliveryDateTime"]
          properties:
            deliveredBy:
              type: "string"
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
            deliveryAddress:
              type: "object"
              description: "The address to which the order will be delivered."
              required:
                [
                  "country",
                  "street",
                  "formattedAddress",
                  "number",
                  "city",
                  "postalCode",
                  "coordinates",
                  "district",
                  "state",
                ]
              properties:
                country:
                  type: "string"
                  pattern: "^[A-Z]{2}$"
                  description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
                  example: "BR"
                state:
                  type: "string"
                  description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
                  example: "BR-SP"
                city:
                  type: "string"
                  description: "City name."
                  example: "São Paulo"
                district:
                  type: "string"
                  description: "Neighborhood or District."
                  example: "Moema"
                street:
                  type: "string"
                  description: "Street name."
                  example: "Plaza Avenue"
                number:
                  type: "string"
                  description: "Street number."
                  example: "100"
                complement:
                  type: "string"
                  description: "Address complement."
                  example: "BL 02 AP 31"
                reference:
                  type: "string"
                  description: "Address reference."
                  example: "Yellow House"
                formattedAddress:
                  type: "string"
                  description: "Full Formated Address Text"
                  example: "Plaza Avenue, 100, BL 02 AP 31, Moema - São Paulo, SP - Brazil"
                postalCode:
                  type: "string"
                  description: "Postal Code"
                  example: "20111-000"
                coordinates:
                  type: "object"
                  required: ["latitude", "longitude"]
                  properties:
                    latitude:
                      type: "number"
                      format: "float"
                      description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                      example: -23.54823
                    longitude:
                      type: "number"
                      format: "float"
                      description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                      example: -46.63632
            estimatedDeliveryDateTime:
              type: "string"
              format: date-time
              description: "Estimated delivery date and time. The same date showed to the customer, in the **Ordering Application** interface. \n\n(UTC date-time in ISO timestamp format)."
            deliveryDateTime:
              type: "string"
              format: date-time
              description: "Delivery date. The date time that the delivery actually took place. \n\n(UTC date-time in ISO timestamp format)."
        takeout:
          type: "object"
          description: "Information for TAKEOUT orders. Required if the chosen `type` is `TAKEOUT`."
          required: ["mode", "takeoutDateTime"]
          properties:
            mode:
              type: "string"
              enum:
                - "DEFAULT"
                - "PICKUP_AREA"
            takeoutDateTime:
              type: "string"
              format: date-time
              description: "Takeout date and time. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        indoor:
          type: "object"
          description: "Information for INDOOR orders. Required if the chosen `type` is `INDOOR`."
          required: ["mode", "indoorDateTime"]
          properties:
            mode:
              type: "string"
              description: |-
                Indoor mode identifier:

                - `DEFAULT`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant without a specific location.

                - `PLACE`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant at a specific location already specified, such as a **table** or a **counter**.

                - `TAB`: Used for establishments that control orders via **tabs** or **control cards** (can be used in conjunction with the place field).
              enum:
                - "DEFAULT"
                - "PLACE"
                - "TAB"
            indoorDateTime:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            place:
              type: "string"
              description: "The place identifier (Required if mode is `PLACE`)"
            tab:
              type: "string"
              description: "The tab or control card identifier (Required if mode is `TAB`)"
        sendDelivered:
          type: "boolean"
          description: |-
            This field indicates whether it is necessary for the `Software Service` to make a request to the [POST /v1/orders/{orderId}/delivered](#operation/orderDelivered) endpoint to indicate to the `Ordering Application` that the order has been delivered to the client.

            `true`: Indicates that the `Ordering Application` is waiting for a request.

            `false` or `not informed`: It is not required to make a request.
        sendTracking:
          type: "boolean"
          description: |-
            This field indicates whether it is necessary for the `Software Service` to make a request to the [POST /v1/orders/{orderId}/tracking](#operation/orderTracking) endpoint to inform the `Ordering Application` about delivery updates.

            `true`: Indicates that the `Ordering Application` is waiting for a request.

            `false` or `not informed`: It is not required to make a request.
        extraInfo:
          type: "string"
          description: "Extra information, if necessary."

    OrderCreate:
      type: "object"
      title: "Order"
      required:
        [
          "type",
          "displayId",
          "orderTiming",
          "preparationStartDateTime",
          "merchant",
          "items",
          "total",
          "payments",
        ]
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "The unique identifier of the order. If ommited, a random OrderId number will be generated."
        "type":
          type: "string"
          description: |-
            `DELIVERY` - for orders that will be delivered to the customer's address.  
            `TAKEOUT` - orders that will be picked up at the establishment by the customer  
            `INDOOR` - orders that will be consumed inside the establishment.

          enum:
            - "DELIVERY"
            - "TAKEOUT"
            - "INDOOR"
        displayId:
          type: "string"
          description: "Order Id shown in the **Ordering Application** interface for the customer."
        sourceAppId:
          type: "string"
          format: uuid
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        lastEvent:
          type: "string"
          description: "The last valid event polled (whether acknowledged or not) or sent via webhook. **[Click here](#operation/pollingEvents)** for definitions of each type."
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "DISPATCHED"
            - "READY_FOR_PICKUP"
            - "PICKUP_AREA_ASSIGNED"
            - "DELIVERED"
            - "CONCLUDED"
            - "CANCELLATION_REQUESTED"
            - "CANCELLATION_REQUEST_DENIED"
            - "CANCELLED"
            - "ORDER_CANCELLATION_REQUEST"
            - "CANCELLED_DENIED"
        orderTiming:
          type: "string"
          description: "Order Timing. Indicates whether the ORDER will have immediate or scheduled delivery."
          enum:
            - "INSTANT"
            - "SCHEDULED"
        preparationStartDateTime:
          type: "string"
          format: "date-time"
          description:
            "Suggestion for the preparation start time after Order creation. This can be used by the **Ordering Application** to inform the merchant to delay the start of the preparation for any reason. Default is the same time as the order creation time.
            \n\n(UTC date-time in ISO timestamp format)."
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        items:
          type: "array"
          description: "Order items."
          items:
            type: "object"
            required:
              [
                id,
                "name",
                "unit",
                "quantity",
                "unitPrice",
                "totalPrice",
                "externalCode",
              ]
            properties:
              id:
                type: "string"
                format: "uuid"
                description: "A unique identifier of the item."
              index:
                type: "integer"
                description: "Item's position."
              name:
                type: "string"
                description: "Product name"
              externalCode:
                type: "string"
                description: "External product code."
              unit:
                type: "string"
                description: |
                  Item's Unit of Measurement.

                  Possible values:  
                  - `UN` - Unit  
                  - `KG` - Kilogram  
                  - `L` - Liter  
                  - `OZ` - Ounce  
                  - `LB` - Pound  
                  - `GAL` - Gallon  

                  > Use fractional values for quantities smaller than the unit of measure:
                  > Example: 500 grams = 0.5 KG
                enum:
                  - "UN"
                  - "KG"
                  - "L"
                  - "OZ"
                  - "LB"
                  - "GAL"
                example: "KG"
              ean:
                type: "string"
                description: "EAN is the barcode standard used on items."
              quantity:
                type: "number"
                format: "double"
                description: |-
                  Amount of items.

                   > Use fractional values for quantities smaller than the unit of measure:
                   > Example: 500 grams = 0.5 KG
              specialInstructions:
                type: "string"
                description: "Special instructions about the items."
              unitPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Price per unit."
              optionsPrice:
                type: "object"
                allOf:
                  - $ref: "#/components/schemas/Price"
                description: "Pricing options."
              totalPrice:
                type: "object"
                description: Total Price of the item. (quantity * unitPrice + optionsPrice)
                allOf:
                  - $ref: "#/components/schemas/Price"
              options:
                type: "array"
                description: "Options related to the item."
                items:
                  type: "object"
                  required:
                    [
                      id,
                      "name",
                      "externalCode",
                      "unit",
                      "quantity",
                      "unitPrice",
                      "totalPrice",
                    ]
                  properties:
                    index:
                      type: "integer"
                      description: "Option's position."
                    id:
                      type: "string"
                      format: "uuid"
                      description: "A unique identifier of the item."
                    name:
                      type: "string"
                      description: "Options name"
                    externalCode:
                      type: "string"
                      description: "External product code."
                    unit:
                      type: "string"
                      description: "Measure unit of the item."
                    ean:
                      type: "string"
                      description: "EAN is the barcode standard used on items."
                    quantity:
                      type: "number"
                      format: "double"
                    unitPrice:
                      type: "object"
                      allOf:
                        - $ref: "#/components/schemas/Price"
                      description: "Price per unit."
                    totalPrice:
                      type: "object"
                      description: Total Price of the option. (quantity * unitPrice)
                      allOf:
                        - $ref: "#/components/schemas/Price"
                    specialInstructions:
                      type: "string"
                      description: "More instructions, if needed."
        otherFees:
          type: "array"
          description: "Other fees that may apply."
          items:
            type: "object"
            required: ["name", "type", "receivedBy", "price"]
            properties:
              name:
                type: "string"
                description: "Name related to the other fees."
              type:
                type: "string"
                enum:
                  - "DELIVERY_FEE"
                  - "SERVICE_FEE"
                  - "TIP"
              receivedBy:
                type: "string"
                enum:
                  - "MARKETPLACE"
                  - "MERCHANT"
                  - "LOGISTIC_SERVICES"
              receiverDocument:
                type: "string"
                description: "Mandatory for marketplace."
              price:
                type: "object"
                description: "The fee price"
                allOf:
                  - $ref: "#/components/schemas/Price"
              observation:
                type: "string"
                description: "Any extra comments."
        discounts:
          type: "array"
          description: "Any discounts that may apply."
          items:
            type: "object"
            required: ["amount", "target", "sponsorshipValues"]
            properties:
              amount:
                type: "object"
                description: Amount value of the discount.
                allOf:
                  - $ref: "#/components/schemas/Price"
              target:
                type: "string"
                enum:
                  - "CART"
                  - "DELIVERY_FEE"
                  - "ITEM"
              targetId:
                type: "string"
                description: "Only mandatory for `target` = `ITEM`."
              sponsorshipValues:
                description: "Values sponsored by either party. The sum of the amounts listed in this atribute must match the value informed in the `amount` atribute above."
                type: "array"
                items:
                  type: "object"
                  required: ["name", "amount"]
                  properties:
                    name:
                      type: "string"
                      enum:
                        - "MARKETPLACE"
                        - "MERCHANT"
                    amount:
                      type: "object"
                      description: Discount amount given by the sponsor.
                      allOf:
                        - $ref: "#/components/schemas/Price"
        total:
          type: "object"
          required: ["itemsPrice", "otherFees", "orderAmount", "discount"]
          description: "Set of fields with the sum of the values previously described in the order."
          properties:
            itemsPrice:
              type: "object"
              description: "Sum of the total price of the items listed in the `items` attribute."
              allOf:
                - $ref: "#/components/schemas/Price"
            otherFees:
              type: "object"
              description: "Sum of the total value of other fees listed in the `otherFees` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            discount:
              type: "object"
              description: "Sum of any discounts that may be listed in the `discounts` attribute. If there isn't one, use 0."
              allOf:
                - $ref: "#/components/schemas/Price"
            orderAmount:
              type: "object"
              description: "The final value of the order (itemsPrice + otherFees - discounts). "
              allOf:
                - $ref: "#/components/schemas/Price"
        payments:
          type: "object"
          required: ["prepaid", "pending", "methods"]
          description: "All the description of the payment, such as methods, pre-payments, change, etc."
          properties:
            prepaid:
              type: "number"
              format: "double"
              description: "Amount paid in advance."
            pending:
              type: "number"
              format: "double"
              description: "Amount that is still to be paid."
            methods:
              type: "array"
              description: "The payment method used. Whether it was online, on delivery, credit card, voucher, cash, etc."
              items:
                type: "object"
                required: ["value", "currency", "type", "method"]
                properties:
                  value:
                    type: "number"
                    format: "double"
                    description: "Price value. 4 doubles places are accepted"
                  currency:
                    type: "string"
                    pattern: "^[A-Z]{3}$"
                    description: "The 3-letter ISO 4217 currency code."
                    example: "BRL"
                  type:
                    type: "string"
                    description: "`PREPAID` if the payment was made through some platform, or `PENDING` if it going to be paid on delivery or in cash, for example."
                    enum:
                      - "PREPAID"
                      - "PENDING"
                  method:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "DIGITAL_WALLET"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "COUPON"
                      - "REDEEM"
                      - "PREPAID_REDEEM"
                      - "OTHER"
                  brand:
                    type: string
                    description: |-
                      Indicates the brand of the card selected in the `method` field.

                      This field must only be filled in if `type` is `PREPAID` and `method` is `CREDIT`, `DEBIT`, `CREDIT_DEBIT`, `MEAL_VOUCHER` or `FOOD_VOUCHER`.

                      If `OTHER` is chosen, it is recommended that you describe the brand name in the `methodInfo` field.
                    enum:
                      - "VISA"
                      - "MASTERCARD"
                      - "DINERS"
                      - "AMEX"
                      - "HIPERCARD"
                      - "ELO"
                      - "AURA"
                      - "DISCOVER"
                      - "VR_BENEFICIOS"
                      - "SODEXO"
                      - "TICKET"
                      - "GOOD_CARD"
                      - "BANESCARD"
                      - "SOROCARD"
                      - "POLICARD"
                      - "VALECARD"
                      - "AGICARD"
                      - "JCB"
                      - "CREDSYSTEM"
                      - "CABAL"
                      - "GREEN_CARD"
                      - "VEROCHEQUE"
                      - "AVISTA"
                      - "OTHER"
                  methodInfo:
                    type: "string"
                    description: |-
                      Additional information regarding the payment method.  
                      It can be used to indicate some useful information of the chosen payment method, such as the name of the wallet, or an authorization number.  

                      This field can be used for any `method` entered, but it is highly recommended to fill it in when the chosen `method` is `OTHER`.
                  changeFor:
                    type: "number"
                    format: "double"
                    description: |-
                      Indicates the total that will be paid in cash by the customer and that should be considered for the calculation of the change   
                      (ex. customer will pay a $43 order with a $50 bill. Then 50.00 must be entered.). 

                      Only mandatory when `method` is `CASH`.
        customer:
          type: "object"
          required: [id, "phone", "name", "ordersCountOnMerchant"]
          description: "Customer related information."
          properties:
            id:
              type: "string"
              format: "uuid"
              description: "A unique identifier related to the consumer. If the Ordering Application does not have an Id for the customer, this Id can be generated when creating the order. "
            phone:
              type: "object"
              description: "Customer's phone. Here you can enter the customer's phone number directly (provided that the customer has given permission for this data to be shared, according to local policies) or another phone number (such as the ordering application's call center phone number) where the merchant can communicate about order issues that affect the customer (such as health issues)."
              required: ["number"]
              properties:
                number:
                  type: "string"
                extension:
                  type: "string"
            documentNumber:
              description: "Customer document. This document may be sent for dealing with tax issues."
              type: "string"
            name:
              type: "string"
              description: "Customer's name."
            email:
              description: "Customer email. This document may be sent for dealing with tax issues."
              type: "string"
            ordersCountOnMerchant:
              description: "Total number of orders that the customer already placed within the merchant."
              type: "number"
              format: "double"
        schedule:
          type: "object"
          description: "Information for scheduled orders. Required if `orderTiming` is `SCHEDULED`."
          required: ["scheduledDateTimeStart", "scheduledDateTimeEnd"]
          properties:
            scheduledDateTimeStart:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            scheduledDateTimeEnd:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        delivery:
          type: "object"
          description: "Information for DELIVERY orders. Required if the chosen `type` is `DELIVERY`."
          required:
            ["deliveredBy", "deliveryAddress", "estimatedDeliveryDateTime"]
          properties:
            deliveredBy:
              type: "string"
              enum:
                - "MERCHANT"
                - "MARKETPLACE"
            deliveryAddress:
              type: "object"
              description: "The address to which the order will be delivered."
              required:
                [
                  "country",
                  "street",
                  "formattedAddress",
                  "number",
                  "city",
                  "postalCode",
                  "coordinates",
                  "district",
                  "state",
                ]
              properties:
                country:
                  type: "string"
                  pattern: "^[A-Z]{2}$"
                  description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
                  example: "BR"
                state:
                  type: "string"
                  description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
                  example: "BR-SP"
                city:
                  type: "string"
                  description: "City name."
                  example: "São Paulo"
                district:
                  type: "string"
                  description: "Neighborhood or District."
                  example: "Moema"
                street:
                  type: "string"
                  description: "Street name."
                  example: "Plaza Avenue"
                number:
                  type: "string"
                  description: "Street number."
                  example: "100"
                complement:
                  type: "string"
                  description: "Address complement."
                  example: "BL 02 AP 31"
                reference:
                  type: "string"
                  description: "Address reference."
                  example: "Yellow House"
                formattedAddress:
                  type: "string"
                  description: "Full Formated Address Text"
                  example: "Plaza Avenue, 100, BL 02 AP 31, Moema - São Paulo, SP - Brazil"
                postalCode:
                  type: "string"
                  description: "Postal Code"
                  example: "20111-000"
                coordinates:
                  type: "object"
                  required: ["latitude", "longitude"]
                  properties:
                    latitude:
                      type: "number"
                      format: "float"
                      description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                      example: -23.54823
                    longitude:
                      type: "number"
                      format: "float"
                      description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                      example: -46.63632
            estimatedDeliveryDateTime:
              type: "string"
              format: date-time
              description: "Estimated delivery date and time. The same date showed to the customer, in the **Ordering Application** interface. \n\n(UTC date-time in ISO timestamp format)."
            deliveryDateTime:
              type: "string"
              format: date-time
              description: "Delivery date. The date time that the delivery actually took place. \n\n(UTC date-time in ISO timestamp format)."
        takeout:
          type: "object"
          description: "Information for TAKEOUT orders. Required if the chosen `type` is `TAKEOUT`."
          required: ["mode", "takeoutDateTime"]
          properties:
            mode:
              type: "string"
              enum:
                - "DEFAULT"
                - "PICKUP_AREA"
            takeoutDateTime:
              type: "string"
              format: date-time
              description: "Takeout date and time. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        indoor:
          type: "object"
          description: "Information for INDOOR orders. Required if the chosen `type` is `INDOOR`."
          required: ["mode", "indoorDateTime"]
          properties:
            mode:
              type: "string"
              description: |-
                Indoor mode identifier:

                - `DEFAULT`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant without a specific location.

                - `PLACE`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant at a specific location already specified, such as a **table** or a **counter**.

                - `TAB`: Used for establishments that control orders via **tabs** or **control cards** (can be used in conjunction with the place field).
              enum:
                - "DEFAULT"
                - "PLACE"
                - "TAB"
            indoorDateTime:
              type: "string"
              format: date-time
              description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
            place:
              type: "string"
              description: "The place identifier (Required if mode is `PLACE`)"
            tab:
              type: "string"
              description: "The tab or control card identifier (Required if mode is `TAB`)"
        sendDelivered:
          type: "boolean"
          description: |-
            This field indicates whether it is necessary for the `Software Service` to make a request to the [POST /v1/orders/{orderId}/delivered](#operation/orderDelivered) endpoint to indicate to the `Ordering Application` that the order has been delivered to the client.

            `true`: Indicates that the `Ordering Application` is waiting for a request.

            `false` or `not informed`: It is not required to make a request.
        sendTracking:
          type: "boolean"
          description: |-
            This field indicates whether it is necessary for the `Software Service` to make a request to the [POST /v1/orders/{orderId}/tracking](#operation/orderTracking) endpoint to inform the `Ordering Application` about delivery updates.

            `true`: Indicates that the `Ordering Application` is waiting for a request.

            `false` or `not informed`: It is not required to make a request.
        extraInfo:
          type: "string"
          description: "Extra information, if necessary."

    OrderConfirmed:
      type: "object"
      title: "Order Confirmed"
      required: ["createdAt", "orderExternalCode"]
      properties:
        reason:
          type: "string"
          description: "Free field for more information about the order confirmation, such as which employee accepted the order, for example."
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        orderExternalCode:
          type: "string"
          description: "External order code, which can be used by merchant or marketplace."
        preparationTime:
          type: "integer"
          description: "Indicates an estimate of the preparation time (in minutes) for the order being confirmed."

    OrderDispatched:
      type: "object"
      title: "Order Dispatched"
      properties:
        deliveryTrackingInfo:
          type: "object"
          description: "Information about the person that was assigned to deliver the order."
          allOf:
            - $ref: "#/components/schemas/DeliveryTrackingInfoDisptach"

    DeliveryTrackingInfoDisptach:
      title: Order Disptach Tracking Info
      type: object
      properties:
        event:
          description: "The delivery last known event."
          type: object
          required: [type, datetime]
          properties:
            type:
              type: string
              description: "The current delivery event."
              enum:
                - DELIVERY_ONGOING
                - ARRIVED_AT_CUSTOMER
                - ORDER_DELIVERED
                - CANCELLED
            message:
              type: string
              description: "Free message. It should be used to provide more detailed information."
            datetime:
              type: string
              format: date-time
              description: "Date and time when the event ocurred. \n\n(UTC date-time in ISO timestamp format)."
        problem:
          description: "In the event of a delivery problem, it states the last known reason."
          type: object
          required: [reason, datetime]
          properties:
            reason:
              type: string
              description: "Problem reason."
              enum:
                - DELIVERYPERSON_OCCURRENCE
                - PAYMENT_PROBLEMS
                - WRONG_PRODUCT_OR_ITEM
                - ORDER_DELAYED
                - ORDER_DAMAGED_OR_VIOLATED
                - CUSTOMER_DID_NOT_PLACE_ORDER
                - CUSTOMER_ADDRESS_UNKNOWN
                - ORDER_MISSING_ITEMS
                - NOBODY_TO_RECEIVE
                - DELIVERYPERSON_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
                - ORDER_DELIVERED_WITHOUT_PAYMENT
                - FRAUD_OR_THEFT
            message:
              type: string
              description: "Free message. It should be used to provide more detailed information."
            datetime:
              type: string
              format: date-time
              description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format)."
        vehicle:
          description: "The vehicle that will be used for this delivery."
          type: object
          required: [type]
          properties:
            type:
              type: "array"
              description: "Vehicle Type"
              items:
                type: string
                enum:
                  - "MOTORBIKE_BAG"
                  - "MOTORBIKE_BOX"
                  - "CAR"
                  - "BICYCLE"
                  - "SCOOTER"
                  - "VUC"
              maxItems: 10
            licencePlate:
              type: "string"
              description: "Licence plate of the vehicle user for the delivery."
        eta:
          type: object
          description: Estimate Times of Pickup and Delivery.
          properties:
            deliveryEtaInMinutes:
              type: integer
              description: "Delivery Eta in **minutes**. Informs how many minutes it will take the delivery person to arrive at the consumer's address for order delivery."
            deliveryEtaDatetime:
              type: string
              format: date-time
              description: "Delivery Eta Datetime. Informs the date and time the delivery person is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format)."
            maxDeliveryTime:
              type: string
              format: date-time
              description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format)."
        deliveryPerson:
          type: "object"
          description: "Information about the person taht was assigned to deliver the order."
          properties:
            id:
              type: string
              description: "Delivery Person Id given by the `Ordering Application`."
            name:
              type: string
              description: "Delivery Person Name."
            pictureURL:
              type: string
              format: "uri"
              description: "URL to access the photo of the delivery person. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."
        externalTrackingURL:
          type: string
          format: "uri"
          description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."

    RequestCancelled:
      type: "object"
      title: "Cancellation Request Accepted"
      required: ["reason", "code", "mode"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - SYSTEMIC_ISSUES
            - DUPLICATE_APPLICATION
            - UNAVAILABLE_ITEM
            - RESTAURANT_WITHOUT_DELIVERY_PERSON
            - OUTDATED_MENU
            - ORDER_OUTSIDE_THE_DELIVERY_AREA
            - BLOCKED_CUSTOMER
            - OUTSIDE_DELIVERY_HOURS
            - INTERNAL_DIFFICULTIES_OF_THE_RESTAURANT
            - RISK_AREA
            - DELIVERY_PROBLEM
        mode:
          type: "string"
          enum:
            - "AUTO"
            - "MANUAL"
        outOfStockItems:
          type: "array"
          description: "Items that are not in the merchant's inventory."
          items:
            format: uuid
            type: string
          maxItems: 100
        invalidItems:
          type: "array"
          description: "Items that do not exist in the merchant's inventory."
          items:
            format: "uuid"
            type: string
          maxItems: 100

    SendCancelRequest:
      type: "object"
      title: "Cancellation Request Accepted"
      required: ["reason", "code"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - CONSUMER_CANCELLATION_REQUESTED
            - OTHER_CANCELLATION_REASON

    RequestDenied:
      type: "object"
      title: "Cancellation Request Denied"
      required: ["reason", "code"]
      properties:
        reason:
          type: "string"
          description: "Open text field indicating the reason for the cancellation."
        code:
          type: "string"
          enum:
            - "DISH_ALREADY_DONE"
            - "OUT_FOR_DELIVERY"

    # Events

    Event:
      type: "object"
      title: "Event"
      required: ["eventId", "eventType", "orderId", "orderURL", "createdAt"]
      discriminator:
        propertyName: eventType
        mapping:
          CREATED: "#/components/schemas/EventMetadata"
          CONFIRMED: "#/components/schemas/EventMetadataConfirm"
          READY_FOR_PICKUP: "#/components/schemas/EventMetadata"
          DISPATCHED: "#/components/schemas/EventMetadata"
          PICKUP_AREA_ASSIGNED: "#/components/schemas/EventMetadataPickup"
          DELIVERED: "#/components/schemas/EventMetadata"
          CONCLUDED: "#/components/schemas/EventMetadata"
          ORDER_CANCELLATION_REQUESTED: "#/components/schemas/EventMetadataCancel"
          CANCELLATION_REQUESTED: "#/components/schemas/EventMetadataCancel"
          CANCELLATION_REQUEST_DENIED: "#/components/schemas/EventMetadataCancel"
          CANCELLED: "#/components/schemas/EventMetadataCancel"
          CANCELLED_DENIED: "#/components/schemas/EventMetadataCancel"
      properties:
        eventId:
          type: "string"
          format: "uuid"
          description: "A unique identifier of the event."
        eventType:
          type: "string"
          description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "DISPATCHED"
            - "READY_FOR_PICKUP"
            - "PICKUP_AREA_ASSIGNED"
            - "DELIVERED"
            - "CONCLUDED"
            - "CANCELLATION_REQUESTED"
            - "CANCELLATION_REQUEST_DENIED"
            - "CANCELLED"
            - "ORDER_CANCELLATION_REQUEST"
            - "CANCELLATION_DENIED"
        orderId:
          type: "string"
          format: uuid
        orderURL:
          type: "string"
          format: "uri"
          description: "The URL to get the order details"
        createdAt:
          type: "string"
          format: date-time
          description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
        sourceAppId:
          type: "string"
          format: uuid
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."

    EventMetadataCancel:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              required: ["reason", "code"]
              type: object
              description: "Information related to the Event Type"
              properties:
                reason:
                  type: "string"
                  description: "Reason for the cancellation"
                code:
                  type: "string"
                  description: "Cancelation reason code"
                  enum:
                    - CONSUMER_CANCELLATION_REQUESTED
                    - OTHER_CANCELLATION_REASON
                clientId:
                  type: "string"
                  description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)."

    EventMetadata:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/Event"

    EventMetadataPickup:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information related to the Event Type"
              required: ["pickupArea"]
              properties:
                pickupArea:
                  type: "string"
                  description: "Information about the pickup area that the merchant needs to deliver the order. Eg: Parking Lot Number"

    EventMetadataConfirm:
      description: Metadata
      required: ["metadata"]
      allOf:
        - $ref: "#/components/schemas/Event"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information related to the Event Type"
              properties:
                clientId:
                  type: "string"
                  description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)"

    AckEvents:
      type: "object"
      title: "Acknowledge Events"
      required: [id, "orderId", "eventType"]
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "A unique identifier of the event."
        orderId:
          type: "string"
          format: "uuid"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
        eventType:
          type: "string"
          description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
          enum:
            - "CREATED"
            - "CONFIRMED"
            - "DISPATCHED"
            - "READY_FOR_PICKUP"
            - "PICKUP_AREA_ASSIGNED"
            - "DELIVERED"
            - "CONCLUDED"
            - "CANCELLATION_REQUESTED"
            - "CANCELLATION_REQUEST_DENIED"
            - "CANCELLED"
            - "ORDER_CANCELLATION_REQUEST"
            - "CANCELLATION_DENIED"

    #Logistics

    DeliveryOrder:
      description: Delivery Order Object.
      type: object
      required:
        [
          orderId,
          orderDisplayId,
          merchant,
          pickupAddress,
          returnToMerchant,
          canCombine,
          deliveryAddress,
          customerName,
          vehicle,
          limitTimes,
          totalOrderPrice,
          totalWeight,
          payments,
        ]
      properties:
        orderId:
          type: string
          format: "uuid"
          description: "The orderId generated by the **`Ordering Application`**."
          example: "52122852-6626-11ed-9022-0242ac120002"
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        pickupAddress:
          description: "Pickup Address."
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                pickupLocation:
                  type: string
                  description: "Pickup Location"
                parkingSpace:
                  type: boolean
                  description: "Parking Space"
                instructions:
                  type: string
                  description: "Any instructions that may help the delivery."
        notifyPickup:
          type: boolean
          description: "Inform whether the **`Logistic Service`** to wait for a notification that the order has actually been picked. This notification happens via the endpoint: [POST /logistics/orderPicked/{orderId}](#operation/logisticsPicked)"
        notifyConclusion:
          type: boolean
          description: "Inform whether the **`Logistic Service`** to wait for a delivery finish notification from the requester, before actually finalizing the delivery in its system. This notification is made via the endpoint: [POST /logistics/finishDelivery/{orderId}](#operation/logisticsFinish)"
        returnToMerchant:
          type: boolean
          description: "Inform whether the delivery person should return to the pickup address after the delivery has been made."
        canCombine:
          type: boolean
          description: "Inform whether the **`Logistic Service`** can combine this order with other orders in the same delivery."
        deliveryAddress:
          description: "Delivery Address"
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                instructions:
                  type: string
                  description: "Instructions"
        customerName:
          type: "string"
          description: "Customer Name."
        customerPhone:
          type: "string"
          description: |-
            Customer's telephone number. 

            **Please note**: The telephone number is considered an identification field and therefore the customer's advance consent is required.
        vehicle:
          description: "Vehicle Info. informs which vehicle options are to be used for delivery. More than one can be informed, but the logistics service must choose only one of the types of vehicles informed."
          allOf:
            - $ref: "#/components/schemas/Vehicle"
        limitTimes:
          type: object
          description: "Limit Times. Informs the maximum pickup and delivery times that must be met by the `Logistics Service`."
          properties:
            pickupLimit:
              type: integer
              description: "Pickup Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be collected at the merchant."
              example: 23
            deliveryLimit:
              type: integer
              description: "Delivery Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be delivered at the consumer's address."
              example: 48
            orderCreatedAt:
              type: string
              format: date-time
              description: "The date and time that the Order was created at the **Ordering Application**. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        totalOrderPrice:
          description: "Total order price that was calculated and displayed for the final consumer in the **`Ordering Application`**. This value may already contain taxes and shipping in addition to the value of the items purchased."
          allOf:
            - $ref: "#/components/schemas/Price"
        orderDeliveryFee:
          description: "This field informs the delivery fee paid by the consumer in the **`Ordering Application`**."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalWeight:
          type: integer
          description: "Total packaging weight in **grams**"
        packageVolume:
          type: number
          description: "The cubage of the packaging in **cubic meters (m³)**."
        packageQuantity:
          type: integer
          description: |-
            Number of packages that will be transported in this order. For example, 2 packages, or 3 boxes.  
            > The unit of measure will not be considered, only the quantity.
        specialInstructions:
          type: string
          description: "Free text to describe special instructions that may apply. These instructions can be used to give some special guidance to the delivery person at the time of the pickup or delivery."
        additionalPricePercentual:
          type: number
          format: double
          description: |-
            Indicates to the **`Logistic Service`** an additional percentage to the list price that the requester agrees to pay for the delivery.
            > The delivery request will be refused if the delivery price exceeds this value.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**


            In this case, any value informed below 50, would result in the order being rejected.
        payments:
          type: object
          description: "Payments Info. It informs the payment methods chosen by the consumer in the **`Ordering Application`**. This section should be used by the `Logistics Service` to check how much the delivery person should receive from the consumer when delivering the order."
          properties:
            method:
              type: string
              description: |-
                OFFLINE - The order will be paid by the consumer at the time the order is received.  
                ONLINE - The order has already been paid through the order application.
              enum:
                - OFFLINE
                - ONLINE
            wirelessPos:
              type: boolean
              description: "Indicates whether the delivery person should take the wireless payment device with him."
            offlineMethod:
              type: array
              description: "If the method is `OFFLINE`, the payment information should be provided."
              items:
                type: object
                description: ""
                properties:
                  type:
                    type: "string"
                    enum:
                      - "CREDIT"
                      - "DEBIT"
                      - "MEAL_VOUCHER"
                      - "FOOD_VOUCHER"
                      - "PIX"
                      - "CASH"
                      - "CREDIT_DEBIT"
                      - "OTHER"
                  amount:
                    allOf:
                      - $ref: "#/components/schemas/Price"
              maxItems: 100
            change:
              description: If type is `CASH`, tells how much change will be needed.
              allOf:
                - $ref: "#/components/schemas/Price"
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs the logistics service of the Id of other orders already in progress so that the operator can combine these orders. This combination may or may not be accepted by the logistic service, respecting the contracted policies."
          items:
            type: string
            format: uuid
          maxItems: 10
        sourceAppId:
          type: "string"
          format: uuid
          description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service** and the **Logistics Services**."
        sourceOrderId:
          type: "string"
          format: uuid
          description: "This field must be filled in with the original OrderId generated by the **Ordering Application**. In most cases this property will have the same value as the `orderId` property, since it is already recommended that the order id created by the **Ordering Application** be sent in the `orderId` property. But if the order id created by the **Ordering Application** is not sent in the `orderId` property then it must be entered in this field."

    Vehicle:
      description: Vehicle Object.
      type: object
      required: [type, container]
      properties:
        type:
          type: "array"
          description: "Vehicle Type"
          items:
            type: string
            enum:
              - "MOTORBIKE_BAG"
              - "MOTORBIKE_BOX"
              - "CAR"
              - "BICYCLE"
              - "SCOOTER"
              - "VUC"
          maxItems: 10
        container:
          type: "string"
          description: "Vehicle container (bag) type."
          enum:
            - "NORMAL"
            - "THERMIC"
        containerSize:
          type: string
          description: "Vehicle container (bag) size."
          enum:
            - "SMALL"
            - "MEDIUM"
            - "LARGE"
            - "EXTRA_LARGE"
        instruction:
          type: "string"
          description: "Free text to describe special instructions that may apply. These instructions can be used to give some special guidance to the delivery person at the time of the pickup or delivery."

    DeliveryOrderResponse:
      description: Delivery Order Response Object.
      type: object
      required: [deliveryId, event, completion]
      properties:
        deliveryId:
          type: "string"
          format: "uuid"
          description: "The delivery Id generated by the **`Logistic Service`**."
          example: "48ae4d68-6626-11ed-9022-0242ac120002"
        event:
          description: "Current event of the order. It is expected to be sent with the value **`PENDING`** at this moment, since the acceptance or rejection of the request will be processed asynchronously."
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - PICKUP_ONGOING
            - ARRIVED_AT_MERCHANT
            - ORDER_PICKED
            - DELIVERY_ONGOING
            - ARRIVED_AT_CUSTOMER
            - ORDER_DELIVERED
            - RETURNING_TO_MERCHANT
            - RETURNED_TO_MERCHANT
            - DELIVERY_FINISHED
            - CANCELLED

        completion:
          type: "object"
          description: "Informs the expected date and time for sending the acceptance or refusal of the delivery order."
          properties:
            estimate:
              type: string
              format: date-time
              description: "Expected date and time for completion. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
            rejectAfter:
              type: string
              format: date-time
              description: "Maximum date and time to wait for the acceptance or refusal of the order. After this time the delivery request should be disregarded and a new request should be made. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        deliveryDetailsURL:
          type: "string"
          format: "uri"
          description: |-
            It is the URL where the delivery information can be found. 
            It should return the [GET /logistics/delivery/{orderId}](#operation/logisticDetails) route for this order."
          example: "http://yourApiBaseUrl.com/v1/logistics/delivery/52122852-6626-11ed-9022-0242ac120002"

    DeliveryOrderEvent:
      description: Delivery Order Event Object.
      type: object
      required:
        [deliveryId, orderId, orderDisplayId, merchant, event, customerName]
      properties:
        deliveryId:
          type: "string"
          format: "uuid"
          description: "The delivery ID generated by the `Logistics Service`."
          example: "48ae4d68-6626-11ed-9022-0242ac120002"
        orderId:
          type: "string"
          format: "uuid"
          description: "The orderId generated by the **`Ordering Application`**."
          example: "52122852-6626-11ed-9022-0242ac120002"
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        event:
          description: "Current Event Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryEvent"
        problem:
          type: array
          description: "List of problems that may occur."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryProblem"
        customerName:
          type: "string"
          description: "Customer Name."
        vehicle:
          description: |-
            Chosen Vehicle Info. 
            > This propertie is **REQUIRED** when `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/ChosenVehicle"
        deliveryPrice:
          description: |-
            Delivery Pricing Info.
            > This propertie is **REQUIRED** when `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        eta:
          description: |-
            Estimate Times of Pickup and Delivery. 
            > This propertie is **REQUIRED** when `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/ETA"
        deliveryPerson:
          description: |-
            Delivery Person Info.
            > This propertie is **REQUIRED** when `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/DeliveryMan"
        geoLocalization:
          description: "Geo Localization Info."
          allOf:
            - $ref: "#/components/schemas/GeoLocalization"
        externalTrackingURL:
          type: string
          format: "uri"
          description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs which other orders from the same merchant are being carried by the same delivery person, with the same `deliveryId`."
          items:
            type: string
            format: uuid

    DeliveryEvent:
      description: Delivery Event Object.
      type: object
      required: [type, datetime]
      properties:
        type:
          type: string
          description: "The current delivery event."
          enum:
            - PENDING
            - ACCEPTED
            - REJECTED
            - PICKUP_ONGOING
            - ARRIVED_AT_MERCHANT
            - ORDER_PICKED
            - DELIVERY_ONGOING
            - ARRIVED_AT_CUSTOMER
            - ORDER_DELIVERED
            - RETURNING_TO_MERCHANT
            - RETURNED_TO_MERCHANT
            - DELIVERY_FINISHED
            - CANCELLED
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the event ocurred. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        rejectionInfo:
          description: "Rejection Info. It should be informed to provide more information when the event type is `REJECTED`."
          allOf:
            - $ref: "#/components/schemas/DeliveryEventDenied"

    DeliveryEventDenied:
      description: Delivery Event Denied Object.
      type: object
      required: [reason]
      discriminator:
        propertyName: reason
        mapping:
          PRICE_EXCEEDED: "#/components/schemas/DeliveryEventDeniedPrice"
          VEHICLE_NOT_AVAILABLE: "#/components/schemas/DeliveryEventDeniedVehicle"
          NO_DELIVERYPERSON_AVAILABLE: "#/components/schemas/DeliveryEventDeniedNoDeliveryMan"
          DOES_NOT_MEET_REQUESTED_TIMES: "#/components/schemas/DeliveryEventDeniedEta"
          REGION_NOT_SERVED: "#/components/schemas/DeliveryEventDenied"
          INVALID_ADDRESS: "#/components/schemas/DeliveryEventDenied"
          OTHER: "#/components/schemas/DeliveryEventDenied"
      properties:
        reason:
          type: string
          description: Rejection reason.
          enum:
            - "PRICE_EXCEEDED"
            - "VEHICLE_NOT_AVAILABLE"
            - "NO_DELIVERYPERSON_AVAILABLE"
            - "DOES_NOT_MEET_REQUESTED_TIMES"
            - "REGION_NOT_SERVED"
            - "OTHER"

    DeliveryEventDeniedVehicle:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information about vehicles availability at the moment."
              properties:
                availableVehicles:
                  type: integer
                  description: "Informs how many vehicles are available at the moment."
                vehiclesAvailable:
                  description: "List of currently available vehicles."
                  allOf:
                    - $ref: "#/components/schemas/Vehicle"
                nextAvailableVehicle:
                  type: integer
                  description: "Informs how soon the next vehicle will be available in **minutes**."

    DeliveryEventDeniedPrice:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "The actual delivery price calculated according to the data given in the request."
              allOf:
                - $ref: "#/components/schemas/DeliveryPrice"

    DeliveryEventDeniedNoDeliveryMan:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "Information about delivery person availability."
              properties:
                nextAvailableVehicle:
                  type: integer
                  description: "Informs how soon the next delivery person will be available in **minutes**."

    DeliveryEventDeniedEta:
      description: Metadata
      allOf:
        - $ref: "#/components/schemas/DeliveryEventDenied"
        - type: object
        - properties:
            metadata:
              type: object
              description: "The actual ETAs calculated according to the data given in the request."
              allOf:
                - $ref: "#/components/schemas/ETA"

    DeliveryProblem:
      description: Delivery Problem Object.
      type: object
      required: [reason, datetime, canFinishDeliver, needMerchantAction]
      properties:
        reason:
          type: string
          description: "Problem reason."
          enum:
            - DELIVERYPERSON_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERYPERSON_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        canFinishDeliver:
          type: boolean
          description: "Informs whether or not it is still possible to finish the delivery."
        needMerchantAction:
          type: boolean
          description: "Informs whether or not the merchant needs to perform some action in order for delivery to continue."

    DeliveryProblemHistory:
      description: Delivery Event.
      type: object
      required: [reason, datetime, resolved]
      properties:
        reason:
          type: string
          description: "Problem reason."
          enum:
            - DELIVERYPERSON_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERYPERSON_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."
        datetime:
          type: string
          format: date-time
          description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        resolved:
          type: boolean
          description: "Informs if the problem was resolved or not."
        actionTaken:
          type: string
          description: "Action taken by the requester."
          enum:
            - RETURN_TO_STORE
            - DELIVER_PRODUCT
            - CANCEL_DELIVERY
        resolutionDate:
          type: string
          format: date-time
          description: "Date and time when the problem was resolved. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."

    ChosenVehicle:
      description: Delivery Order Response Object
      type: object
      required: [type, container]
      properties:
        type:
          type: string
          description: "Vehicle Type."
          enum:
            - "MOTORBIKE_BAG"
            - "MOTORBIKE_BOX"
            - "CAR"
            - "BICYCLE"
            - "SCOOTER"
            - "VUC"
        container:
          type: "string"
          description: "The veichle container (bag) type."
          enum:
            - "NORMAL"
            - "THERMIC"
        containerSize:
          type: string
          description: "Vehicle container (bag) size."
          enum:
            - "SMALL"
            - "MEDIUM"
            - "LARGE"
            - "EXTRA_LARGE"
        instruction:
          type: "string"
          description: "Special Instructions."

    DeliveryPrice:
      description: Delivery Pricing
      type: object
      required: [price, pricingList, additionalPricePercentual]
      properties:
        price:
          description: "The calculated price of the delivery. It may be 0. The price shall be calculated according to the Price List being used, as well as previously established commercial agreements."
          allOf:
            - $ref: "#/components/schemas/Price"
        pricingList:
          type: string
          description: "Indicates what list was used to calculate the delivery price."
          enum:
            - "NORMAL"
            - "DYNAMIC"
        additionalPricePercentual:
          type: number
          description: |-
            Indicates the additional percentage to the list price that was calculated for this delivery.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**

    DeliveryAvailabilityPrice:
      description: Delivery Order Object
      type: object
      required:
        [
          pickupAddress,
          returnToMerchant,
          canCombine,
          deliveryAddress,
          vehicle,
          limitTimes,
          totalOrderPrice,
          totalWeight,
        ]
      properties:
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        pickupAddress:
          description: "Pickup Address."
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                pickupLocation:
                  type: string
                  description: "Pickup Location"
                parkingSpace:
                  type: boolean
                  description: "Parking Space"
                instructions:
                  type: string
                  description: "Instructions"
        returnToMerchant:
          type: boolean
          description: "Inform whether the delivery person should return to the pickup address after the delivery has been made."
        canCombine:
          type: boolean
          description: "Inform whether the **`Logistic Service`** can combine this order with other orders in the same delivery."
        deliveryAddress:
          description: "Delivery Address"
          allOf:
            - $ref: "#/components/schemas/AddressLogistics"
            - type: object
              properties:
                instructions:
                  type: string
                  description: "Instructions"
        vehicle:
          description: "Vehicle Info. informs which vehicle options are to be used for delivery. More than one can be informed, but the logistics service must choose only one of the types of vehicles informed."
          allOf:
            - $ref: "#/components/schemas/Vehicle"
        limitTimes:
          type: object
          description: "Limit Times. Informs the maximum pickup and delivery times that must be met by the `Logistics Service`."
          properties:
            pickupLimit:
              type: integer
              description: "Pickup Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be collected at the merchant."
              example: 23
            deliveryLimit:
              type: integer
              description: "Delivery Limit in **minutes**. It should be used to inform the maximum amount of minutes from the time the request was made to which the order should be delivered at the consumer's address."
              example: 48
            orderCreatedAt:
              type: string
              format: date-time
              description: "The date and time that the Order was created at the **Ordering Application**. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        totalOrderPrice:
          description: "Total order price that was calculated and displayed for the final consumer in the **`Ordering Application`**. This value may already contain taxes and shipping in addition to the value of the items purchased."
          allOf:
            - $ref: "#/components/schemas/Price"
        orderDeliveryFee:
          description: "This field informs the delivery fee paid by the consumer in the **`Ordering Application`**."
          allOf:
            - $ref: "#/components/schemas/Price"
        totalWeight:
          type: integer
          description: "Total Weight in **grams**"
        packageVolume:
          type: number
          description: "The cubage of the packaging in **cubic meters (m³)**."
        packageQuantity:
          type: integer
          description: |-
            Number of packages that will be transported in this order. For example, 2 packages, or 3 boxes. 
            > The unit of measure will not be considered, only the quantity.
        specialInstructions:
          type: string
          description: "Free text to describe special instructions that may apply."
        additionalPricePercentual:
          type: number
          description: |-
            Indicates to the **`Logistic Service`** an additional percentage to the list price that the requester agrees to pay for the delivery.
            > The delivery request will be refused if the delivery price exceeds this value.

            Example: List Price = $10  
                     Actual calculated price = $15  
                     Additonal price percentage = **50**


            In this case, any value informed below 50, would result in the order being rejected.
        onlinePayment:
          type: boolean
          description: "Informs whether or not the payment has already been made in the **`Ordering Application`**"

    DeliveryAvailabilityPriceResponse:
      description: Delivery Order Response Object
      type: object
      properties:
        deliveryPrice:
          description: "Delivery Pricing Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        vehicles:
          type: object
          description: "Chosen Vehicle Info."
          properties:
            availableVehicles:
              type: integer
              description: "Informs how many vehicles are available at the moment."
            vehiclesAvailable:
              description: "List of currently available vehicles."
              allOf:
                - $ref: "#/components/schemas/Vehicle"
            nextAvailableVehicle:
              type: integer
              description: "Informs how soon the next vehicle will be available in **minutes**."
        ETAs:
          description: "ETAs"
          allOf:
            - $ref: "#/components/schemas/ETA"

    ETA:
      description: ETA
      type: object
      required:
        [
          updateMethod,
          pickupEtaInMinutes,
          pickupEtaDatetime,
          deliveryEtaInMinutes,
          deliveryEtaDatetime,
          maxDeliveryTime,
        ]
      properties:
        updateMethod:
          type: string
          description: |-
            Update Method: Indicates how the times will be updated in the events.

            `OFFLINE`: The time will be calculated in the event `ACCEPTED` and will no longer be updated in the following events.  

            `ONLINE`: The time will be updated in all events. In this case, when the collection has already occurred, the `pickupEtaInMinutes` property will be set to **0** and the `pickupEtaDatetime` property will be the time when the collection occurred.
          enum:
            - OFFLINE
            - ONLINE
        pickupEtaInMinutes:
          type: integer
          description: "Pickup Eta in **minutes**. Informs how many minutes it will take the delivery person to arrive at the merchant for order pickup."
        pickupEtaDatetime:
          type: string
          format: date-time
          description: "Pickup Eta Datetime. Informs the date and time the delivery person is expected to arrive at the merchant for order pickup. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        deliveryEtaInMinutes:
          type: integer
          description: "Delivery Eta in **minutes**. Informs how many minutes it will take the delivery person to arrive at the consumer's address for order delivery."
        deliveryEtaDatetime:
          type: string
          format: date-time
          description: "Delivery Eta Datetime. Informs the date and time the delivery person is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        returnToMerchantEtaInMinutes:
          type: integer
          description: "Delivery Person return to merchant Eta in **minutes**. Informs how many minutes it will take the delivery person to return to the merchant. Only valid when `returnToMerchant` is `true`."
        returnToMerchantEtaDatetime:
          type: string
          format: date-time
          description: "Delivery Person return to merchant Eta Datetime. Informs the date and time the delivery person will arrive at the returning merchant. Only valid when `returnToMerchant` is `true`. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        maxDeliveryTime:
          type: string
          format: date-time
          description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."

    DeliveryMan:
      description: Delivery Person
      type: object
      required: [id, name]
      properties:
        id:
          type: string
          description: "Delivery Person Id generated at the `Logistics Service`."
        name:
          type: string
          description: "Delivery Person Name."
        pictureURL:
          type: string
          format: "uri"
          description: "URL to access the photo of the delivery person. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."
        phone:
          type: string
          description: "Delivery Person Phone. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."

    GeoLocalization:
      description: Delivery Event
      type: object
      required: [latitude, longitude]
      properties:
        latitude:
          type: "number"
          format: "float"
          description: "Indicates the latitude coordinate of the actual position of the delivery person.\n\n\n\nLatitude in degrees. Values are restricted to the range [[-90, 90]]."
          example: -23.54809
        longitude:
          type: "number"
          format: "float"
          description: "Indicates the longitude coordinate of the actual position of the delivery person.\n\n\n\nLongitude in degrees. Values are restricted to the range [[-180, 180]]."
          example: -46.63638
        lastAddress:
          description: The last known address that the delivery person was when the event was sent.
          type: object
          required: [distanceToPickup, distanceToDelivery, timestamp]
          properties:
            "country":
              type: "string"
              pattern: "^[A-Z]{2}$"
              description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
              example: "BR"
            state:
              type: "string"
              description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
              example: "BR-SP"
            "city":
              type: "string"
              description: "City name."
              example: "São Paulo"
            "district":
              type: "string"
              description: "District or Neighborhood name."
              example: "Moema"
            "street":
              type: "string"
              description: "Street Name."
              example: "Plaza Avenue"
            "postalCode":
              type: "string"
              description: "Postal Code."
              example: "20111-000"
            distanceToPickup:
              type: string
              description: "Distance To Pickup in **meters**."
            distanceToDelivery:
              type: string
              description: "Distance To Delivery in **meters**."
            timestamp:
              type: string
              format: date-time
              description: "Date and time when this information is valid. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."

    DeliveryCancel:
      description: Delivery Cancel
      type: object
      required: [reason]
      properties:
        reason:
          type: string
          description: "Cancel Reason."
          enum:
            - CONSUMER_CANCELLATION_REQUESTED
            - NO_SHOW
            - PROBLEM_AT_MERCHANT
            - HIGH_ACCEPTANCE_TIME
            - INCORRECT_ORDER_OR_PRODUCT_PICKUP
            - PROBLEM_RESOLUTION
            - DISCOMBINE_ORDER
            - OTHER
        action:
          type: string
          description: "Action to be taken by the delivery person, after the cancellation."
          enum:
            - RETURN_TO_STORE
            - CANCEL_DELIVERY
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."

    DeliveryCancelResponse:
      type: object
      required: [additionalCharges]
      properties:
        additionalCharges:
          type: boolean
          description: "Informs whether or not the cancellation will cause an additional charge to the delivery."

    DeliveryHandleProblem:
      description: Delivery Cancel
      type: object
      required: [reason, action]
      properties:
        reason:
          type: string
          description: "Problem Reason."
          enum:
            - DELIVERYPERSON_OCCURRENCE
            - PAYMENT_PROBLEMS
            - WRONG_PRODUCT_OR_ITEM
            - ORDER_DELAYED
            - ORDER_DAMAGED_OR_VIOLATED
            - CUSTOMER_DID_NOT_PLACE_ORDER
            - CUSTOMER_ADDRESS_UNKNOWN
            - ORDER_MISSING_ITEMS
            - NOBODY_TO_RECEIVE
            - DELIVERYPERSON_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER
            - ORDER_DELIVERED_WITHOUT_PAYMENT
            - FRAUD_OR_THEFT
            - OTHER
        action:
          type: string
          description: "The action that the delivery person should take to solve this problem."
          enum:
            - RETURN_TO_STORE
            - DELIVER_PRODUCT
            - CANCEL_DELIVERY
        message:
          type: string
          description: "Free message. It should be used to provide more detailed information."

    DeliveryOrderPicked:
      type: "object"
      title: "Order Picked"
      properties:
        pickupDate:
          type: "string"
          format: date-time
          description: "Date and time when the order pickup occurred. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        volumePicked:
          type: "integer"
          description: "Number of volumes picked up."
        observation:
          type: string
          description: "Free text. It should be used to provide more detailed information."

    DeliveryOrderFinish:
      type: "object"
      title: "Order Picked"
      required: ["finishDate"]
      properties:
        finishDate:
          type: "string"
          format: date-time
          description: "Date and time when delivery completion occurred. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        observation:
          type: string
          description: "Free text. It should be used to provide more detailed information."

    DeliveryOrderDetails:
      description: Delivery Order Details Object
      type: object
      required:
        [deliveryId, orderId, orderDisplayId, merchant, customerName, events]
      properties:
        deliveryId:
          type: "string"
          format: "uuid"
          description: "The delivery ID generated by the `Logistics Service`."
        orderId:
          type: "string"
          format: "uuid"
          description: "The orderId generated by the **`Ordering Application`**."
        orderDisplayId:
          type: string
          description: "Order Id shown in the **`Ordering Application`** interface for the customer."
          example: "96b41025"
        merchant:
          type: "object"
          required: [id, "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Public Name"
              maxLength: 500
              example: "Pizza Plaza"
        customerName:
          type: "string"
          description: "Customer Name."
        customerPhone:
          type: "string"
          description: |-
            Customer's telephone number. 

            **Please note**: The telephone number is considered an identification field and therefore the customer's advance consent is required.
        events:
          type: array
          description: "Events History."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryEvent"
        problem:
          type: array
          description: "History of problems that occuried during delivery."
          items:
            allOf:
              - $ref: "#/components/schemas/DeliveryProblemHistory"
        vehicle:
          description: |-
            Chosen Vehicle Info. 
            > This propertie is **REQUIRED** when current `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/ChosenVehicle"
        deliveryPrice:
          description: |-
            Delivery Pricing Info.
            > This propertie is **REQUIRED** when current `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/DeliveryPrice"
        times:
          description: |-
            Estimate Times of Pickup and Delivery. 
            > This propertie is **REQUIRED** when current `event > type` is different from `PENDING`, `REJECTED` and `CANCELLED`
          allOf:
            - $ref: "#/components/schemas/DeliveryTimes"
        deliveryPerson:
          description: "Delivery person Info."
          allOf:
            - $ref: "#/components/schemas/DeliveryMan"
        combinedOrdersIds:
          type: "array"
          description: "Combined Orders Ids. Informs which other orders from the same merchant are being carried by the same delivery person, with the same `deliveryId`."
          items:
            type: string
            format: uuid
        externalTrackingURL:
          type: string
          format: "uri"
          description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."

    DeliveryTimes:
      description: ETA
      type: object
      required: [deliveryEtaDate, maxDeliveryTime, isDeliveryFinished]
      properties:
        deliveryEtaDate:
          type: string
          format: date-time
          description: "Delivery Eta Datetime. Informs the date and time the delivery person is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        maxDeliveryTime:
          type: string
          format: date-time
          description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."
        isDeliveryFinished:
          type: boolean
          description: "Informs whether or not the delivery is finished."
        deliveryFinishDate:
          type: string
          format: date-time
          description: "Date and time when the delivery finished. \n\n(UTC date-time in ISO timestamp format. See [Guidelines](#section/General-Guidelines) for more info)."

    # Common

    AddressLogistics:
      type: "object"
      title: "Address"
      required:
        [
          "country",
          "state",
          "city",
          "district",
          "street",
          "number",
          "postalCode",
          "complement",
        ]
      properties:
        "country":
          type: "string"
          pattern: "^[A-Z]{2}$"
          description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
          example: "BR"
        state:
          type: "string"
          description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
          example: "BR-SP"
        "city":
          type: "string"
          description: "City name."
          example: "São Paulo"
        "district":
          type: "string"
          description: "District or Neighborhood name."
          example: "Moema"
        "street":
          type: "string"
          description: "Street Name."
          example: "Plaza Avenue"
        "number":
          type: "string"
          description: "Street Number."
          example: "100"
        "postalCode":
          type: "string"
          description: "Postal Code"
          example: "20111-000"
        "complement":
          type: "string"
          description: "Address complement."
          example: "BL 02 AP 31"
        "reference":
          type: "string"
          description: "Address reference."
          example: "Yellow House"
        "latitude":
          type: "number"
          format: "float"
          description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -23.54809
        "longitude":
          type: "number"
          format: "float"
          description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 decimal places (multipleOf: 0.00001)**."
          example: -46.63638

    Price:
      type: "object"
      title: "Price"
      required: ["value", "currency"]
      properties:
        value:
          type: "number"
          format: "double"
          description: "Price value. 4 doubles places are accepted"
          example: 40
        currency:
          type: "string"
          description: "The 3-letter ISO 4217 currency code."
          example: "BRL"

    Error:
      type: object
      required: ["title", "status"]
      properties:
        title:
          type: string
          description: "Short description of the problem."
          example: "Unexpected error"
        status:
          type: integer
          description: "HTTP code of the returned status."
          example: 500

    CancellationError:
      title: Cancellation Error
      type: object
      required: ["title", "status"]
      properties:
        title:
          type: string
          description: "Short description of the problem."
          example: "Unexpected error"
        status:
          type: integer
          description: "HTTP code of the returned status."
          example: 500
        cancellationStatus:
          type: string
          description: "Indicates the result of the cancellation request."
          enum:
            - "CANCELLED"
            - "CANCELLATION_REQUEST_DENIED"

    # Sandbox

    SandboxRegister:
      title: Sandbox Register
      type: object
      required: ["merchant", "eventReceptionMode"]
      properties:
        merchant:
          type: "object"
          required: ["id", "name"]
          description: "Merchant information."
          properties:
            id:
              type: "string"
              description: |-
                Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  
                This id must be generated by the merchant's **`Software Service`**.

                > To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  
                > `Merchant Document + uuid`

                > If this is not possible, it is recommended to at least use a uuid.

              minLength: 36
              maxLength: 100
              example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            name:
              type: "string"
              description: "Merchant Name"
          maxLength: 500
          example: "Pizza Plaza"
        eventReceptionMode:
          type: string
          description: "Indicates the mode you want to receive the order Events."
          enum:
            - "POLLING"
            - "WEBHOOK"
        webhookURL:
          type: string
          format: "uri"
          description: "The uri of the webhook, for receiving order events.\n\n**REQUIRED when `eventReceptionMode = WEBHOOK`."
