swagger: "2.0"
info: 
  description: |- 
    ### Bem vindo a documentação do Sandbox do Open Delivery.
    
    Todos os endpoints expostos aqui seguem a documentação oficial da API do Open Delivery disponível em: [Open Delivery Documentation](https://abrasel-nacional.github.io/docs/)
    
    Esta versão do sandbox contempla **apenas** os endpoints relacionados ao padrão de **PEDIDOS**.
    
    Além dos enpoints da documentação oficial, também estão disponíveis neste ambiente, endpoints para simular ações do **Ordering Application**, como a criação de um novo pedido por exemplo. Esses endpoints estão agrupados na Tag **Sandbox**.
    <br />
    #### Como utilizar:
     - Antes de iniciar qualquer chamada é necessário cadastrar um **merchant** na aplicação. Para isso utilize o endpoint: `PUT /sandbox/registration`.
       - _Seguindo a documentação oficial, só é possível cadastrar **UM merchant por client_id** logado. Se você deseja testar mais de um merchant, é necessário a criação de novos Apps. Efetuar novas chamadas no endpoint irá apenas sobrescrever as informações fornecidas anteriormente._
     
     - Após registrado o merchant, você pode criar um novo pedido através do endpoint `POST /sandbox/orders`. Com o pedido criado, segue-se o fluxo de envio e recebimentos da API do Open Delivery.
     
     - O sandbox também fornece alguns outros endpoints para efetuar ações sobre o pedido, como conclusão e cancelamento.
     

  version: "v1.0.0"
  title: "Open Delivery Sandbox"
host: "api.opendelivery.com.br"
basePath: "/od-sb/v1"
tags: 
  - 
    name: "Sandbox"
    description: "Sandbox exclusive endpoints not present in the official Open Delivery documentation. \n\nThese endpoints should be used to **SIMULATE** actions that would be performed by the **`Ordering Application`**."
  - 
    name: "Orders Polling"
    description: "Endpoints related to Order Polling.\n\n**See:** [Polling - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersPolling)"
  - 
    name: "Order Details"
    description: "Retrieve the full order information.\n\n**See:** [Order Details - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersDetails)"
  - 
    name: "Order Update"
    description: "Endpoints related to Order Event updates.\n\n**See:** [Order Events - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersStatus)"
  - 
    name: "Order Cancellation"
    description: "'Endpoints related to Order Cancellation.\n\n**See:** [Order Cancellation - Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersCancellation)"
schemes: 
  - "https"
security: 
  - 
    OAuth2: 
      - "od.all"
paths: 
  /orders/{orderId}/readyForPickup: 
    post: 
      tags: 
        - "Order Update"
      summary: "Indicates that the order is ready for pickup.\n\nIt is expected to receive a `READY_FOR_PICKUP` event after this action."
      description: "Indicates that the order is ready for pickup.\n\nIt is expected to receive a `READY_FOR_PICKUP` event after this action."
      operationId: "orderReady"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/delivered: 
    post: 
      tags: 
        - "Order Update"
      summary: "Indicates that the order has been delivered.\n\nIt is expected to receive a `DELIVERED` event after this action."
      description: "Indicates that the order has been delivered.\n\nIt is expected to receive a `DELIVERED` event after this action."
      operationId: "orderDelivered"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/requestCancellation: 
    post: 
      tags: 
        - "Order Cancellation"
      summary: "Requests an order cancellation.\n        \nIt is expected to receive a `CANCELATTION_REQUESTED` event after this action."
      description: "Requests an order cancellation.\n        \nIt is expected to receive a `CANCELATTION_REQUESTED` event after this action."
      operationId: "requestCancellation"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          required: true
          schema: 
            $ref: "#/definitions/RequestCancelled"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/CancellationError"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/acceptCancellation: 
    post: 
      tags: 
        - "Order Cancellation"
      summary: "Accepts the order cancellation request sent previously\n\nIt is expected to receive a `CANCELLED` event after this action."
      description: "Accepts the order cancellation request sent previously\n\nIt is expected to receive a `CANCELLED` event after this action."
      operationId: "cancellationAccepted"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "Status 200 available for compatibility reasons. Please use status 204 instead."
        204: 
          description: "Order cancellation has been confirmed. No response content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders: 
    post: 
      tags: 
        - "Sandbox"
      summary: "Posts a new order for the registered merchant.\n\nThe **Software Service** will receive an `CREATED` event after this action."
      description: "Posts a new order for the registered merchant.\n\nThe **Software Service** will receive an `CREATED` event after this action."
      operationId: "sandboxPostOrder"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
        - "application/problem+json"
      parameters: 
        - 
          in: "body"
          name: "body"
          required: false
          schema: 
            $ref: "#/definitions/Order"
      responses: 
        201: 
          description: "Created"
          schema: 
            $ref: "#/definitions/Order"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /events/acknowledgment: 
    post: 
      tags: 
        - "Orders Polling"
      summary: "Acknowledge a set of events, dismissing them from future polling calls."
      description: "Acknowledge a set of events, dismissing them from future polling calls."
      operationId: "pollingAcknowledgment"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          in: "body"
          name: "body"
          required: true
          schema: 
            type: "array"
            items: 
              $ref: "#/definitions/AckEvents"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/events"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /events:polling: 
    get: 
      tags: 
        - "Orders Polling"
      summary: "Polls events for any orders from merchants associated with the authenticated user.  \nEach event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests."
      description: "Polls events for any orders from merchants associated with the authenticated user.  \nEach event received from this endpoint must be properly acknowledged, otherwise it will continue to be returned on further requests."
      operationId: "pollingEvents"
      produces: 
        - "application/json"
        - "application/problem+json"
      parameters: 
        - 
          name: "x-polling-merchants"
          in: "header"
          description: "Subset of merchants to fetch events from. Must either be omitted or non-empty.\n> At this time, this field will only return data from the authenticated merchant, since authentication occurs per merchant and not per application. This field may be used in future versions."
          required: false
          type: "array"
          items: 
            type: "string"
          collectionFormat: "csv"
        - 
          name: "eventType"
          in: "query"
          description: "Events Types"
          required: false
          type: "array"
          items: 
            type: "string"
            enum: 
              - "CREATED"
              - "CONFIRMED"
              - "DISPATCHED"
              - "READY_FOR_PICKUP"
              - "PICKUP_AREA_ASSIGNED"
              - "DELIVERED"
              - "CONCLUDED"
              - "CANCELLATION_REQUESTED"
              - "CANCELLATION_REQUEST_DENIED"
              - "CANCELLED"
              - "ORDER_CANCELLATION_REQUEST"
              - "CANCELLATION_DENIED"
          collectionFormat: "multi"
      responses: 
        200: 
          description: "Successful returns list of polled events ."
          schema: 
            type: "array"
            items: 
              $ref: "#/definitions/Event"
            maxItems: 50
        204: 
          description: "No content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/events"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}: 
    get: 
      tags: 
        - "Order Details"
      summary: "Endpoint to consult the full details of an order."
      description: "Endpoint to consult the full details of an order."
      operationId: "orderDetails"
      produces: 
        - "application/json"
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "Order returning success."
          schema: 
            $ref: "#/definitions/Order"
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders/{orderId}/cancel: 
    post: 
      tags: 
        - "Sandbox"
      summary: "Cancels an order in progress. \n\nThis will override whatever status the order is in and change it to **`CANCELLED`**.\n\nThe **Software Service** will receive an `CANCELLED` event after this action."
      description: "Cancels an order in progress. \n\nThis will override whatever status the order is in and change it to **`CANCELLED`**.\n\nThe **Software Service** will receive an `CANCELLED` event after this action."
      operationId: "sandboxCancelOrder"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/registration: 
    put: 
      tags: 
        - "Sandbox"
      summary: "Register the `merchantId` and set how you want to receive the order Events. \n\nAt this time, only reception via `POLLING` is accepted.\n\n**IMPORTANT**: Following the Open Delivery API docs, only **1** `merchantId` can be registed per `clientId`.\n\n**_Source_**: [https://abrasel-nacional.github.io/docs/#tag/authentication](https://abrasel-nacional.github.io/docs/#tag/authentication)"
      description: "Register the `merchantId` and set how you want to receive the order Events. \n\nAt this time, only reception via `POLLING` is accepted.\n\n**IMPORTANT**: Following the Open Delivery API docs, only **1** `merchantId` can be registed per `clientId`.\n\n**_Source_**: [https://abrasel-nacional.github.io/docs/#tag/authentication](https://abrasel-nacional.github.io/docs/#tag/authentication)"
      operationId: "sandboxRegister"
      consumes: 
        - "application/json"
      produces: 
        - "application/json"
        - "application/problem+json"
      parameters: 
        - 
          in: "body"
          name: "body"
          required: false
          schema: 
            $ref: "#/definitions/SandboxRegister"
      responses: 
        200: 
          description: "OK"
          schema: 
            $ref: "#/definitions/SandboxRegister"
        201: 
          description: "Created"
          schema: 
            $ref: "#/definitions/SandboxRegister"
        204: 
          description: "No content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/confirm: 
    post: 
      tags: 
        - "Order Update"
      summary: "Confirms receipt of order.\n\nIt is expected to receive a `CONFIRMED` event after this action."
      description: "Confirms receipt of order.\n\nIt is expected to receive a `CONFIRMED` event after this action."
      operationId: "confirmOrder"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          required: false
          schema: 
            $ref: "#/definitions/OrderConfirmed"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders/{orderId}/denyMerchantCancellation: 
    post: 
      tags: 
        - "Sandbox"
      summary: "This endpoint simulates the denial of a cancellation request originated by the **Software Service**. \n\nThe **Software Service** will receive a `CANCELLATION_REQUEST_DENIED` event after this action."
      description: "This endpoint simulates the denial of a cancellation request originated by the **Software Service**. \n\nThe **Software Service** will receive a `CANCELLATION_REQUEST_DENIED` event after this action."
      operationId: "sandboxMerchantCancellationDenied"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          description: "Request for order cancellation has been denied."
          required: true
          schema: 
            $ref: "#/definitions/RequestDenied"
      responses: 
        200: 
          description: "Status 200 available for compatibility reasons. Please use status 204 instead."
        204: 
          description: "Order cancellation has been denied. No response content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders/{orderId}/conclude: 
    post: 
      tags: 
        - "Sandbox"
      summary: "Concludes an order in progress. \n\nThis will override whatever status the order is in and change it to **`CONCLUDED`**.\n\nThe **Software Service** will receive an `CONCLUDED` event after this action."
      description: "Concludes an order in progress. \n\nThis will override whatever status the order is in and change it to **`CONCLUDED`**.\n\nThe **Software Service** will receive an `CONCLUDED` event after this action."
      operationId: "sandboxConcludeOrder"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders/{orderId}/acceptMerchantCancellation: 
    post: 
      tags: 
        - "Sandbox"
      summary: "This endpoint simulates the acceptance of a cancellation request originated by the **Software Service**. \n\nThe **Software Service** will receive a `CANCELLED` event after this action."
      description: "This endpoint simulates the acceptance of a cancellation request originated by the **Software Service**. \n\nThe **Software Service** will receive a `CANCELLED` event after this action."
      operationId: "sandboxMerchantCancellationAccepted"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
      responses: 
        200: 
          description: "Status 200 available for compatibility reasons. Please use status 204 instead."
        204: 
          description: "Order cancellation has been confirmed. No response content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /sandbox/orders/{orderId}/sendCancellationRequest: 
    post: 
      tags: 
        - "Sandbox"
      summary: "This endpoint simulates a cancellation request from the **Ordering Application** to the **Software Service**. \n\nThe **Software Service** will receive an `ORDER_CANCELLATION_REQUESTED` event after this action.\n\nThen the **Software Service** is expected to call one of the two endpoints:\n\n`/orders/{orderId}/acceptCancellation` or `/orders/{orderId}/denyCancellation`"
      description: "This endpoint simulates a cancellation request from the **Ordering Application** to the **Software Service**. \n\nThe **Software Service** will receive an `ORDER_CANCELLATION_REQUESTED` event after this action.\n\nThen the **Software Service** is expected to call one of the two endpoints:\n\n`/orders/{orderId}/acceptCancellation` or `/orders/{orderId}/denyCancellation`"
      operationId: "sandboxSendCancellationRequest"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          required: true
          schema: 
            $ref: "#/definitions/RequestCancelled"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/CancellationError"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/sandbox"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/dispatch: 
    post: 
      tags: 
        - "Order Update"
      summary: "Indicates that the order has been dispatched.\n\nIt is expected to receive a `DISPATCHED` event after this action."
      description: "Indicates that the order has been dispatched.\n\nIt is expected to receive a `DISPATCHED` event after this action."
      operationId: "dispatchOrder"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          required: false
          schema: 
            $ref: "#/definitions/OrderDispatched"
      responses: 
        202: 
          description: "Request has been accepted for processing."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
  /orders/{orderId}/denyCancellation: 
    post: 
      tags: 
        - "Order Cancellation"
      summary: "Denies the order cancellation request sent previously\n\nIt is expected to receive a `CANCELLATION_DENIED` event after this action."
      description: "Denies the order cancellation request sent previously\n\nIt is expected to receive a `CANCELLATION_DENIED` event after this action."
      operationId: "cancellationDenied"
      consumes: 
        - "application/json"
      produces: 
        - "application/problem+json"
      parameters: 
        - 
          name: "orderId"
          in: "path"
          description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
          required: true
          type: "string"
          format: "uuid"
        - 
          in: "body"
          name: "body"
          description: "Request for order cancellation has been denied."
          required: true
          schema: 
            $ref: "#/definitions/RequestDenied"
      responses: 
        200: 
          description: "Status 200 available for compatibility reasons. Please use status 204 instead."
        204: 
          description: "Order cancellation has been denied. No response content."
        400: 
          description: "Bad Request"
          schema: 
            $ref: "#/definitions/Error"
        401: 
          description: "Request lacks valid authentication credentials for the target resource"
          schema: 
            $ref: "#/definitions/Error"
        403: 
          description: "Authenticated participant request that violates some authorization rule."
          schema: 
            $ref: "#/definitions/Error"
        404: 
          description: "The requested resource was not found."
          schema: 
            $ref: "#/definitions/Error"
        422: 
          description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
          schema: 
            $ref: "#/definitions/Error"
        503: 
          description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
          schema: 
            $ref: "#/definitions/Error"
      x-resource-name: "/orders"
      x-destination: null
      x-timeout: null
      x-api-broken: false
      x-interceptors: {}
    parameters: []
securityDefinitions: 
  OAuth2: 
    description: "Oauth2 should be used for all API calls."
    type: "oauth2"
    tokenUrl: "https://api.opendelivery.com.br/sandbox/v1/oauth/token"
    flow: "application"
    scopes: 
      od.all: "Access to all **Open Delivery** APIs"
definitions: 
  AckEvents: 
    type: "object"
    required: 
      - "eventType"
      - "id"
      - "orderId"
    properties: 
      eventType: 
        type: "string"
        description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
        enum: 
          - "CREATED"
          - "CONFIRMED"
          - "DISPATCHED"
          - "READY_FOR_PICKUP"
          - "PICKUP_AREA_ASSIGNED"
          - "DELIVERED"
          - "CONCLUDED"
          - "CANCELLATION_REQUESTED"
          - "CANCELLATION_REQUEST_DENIED"
          - "CANCELLED"
          - "ORDER_CANCELLATION_REQUEST"
          - "CANCELLATION_DENIED"
      id: 
        type: "string"
        format: "uuid"
        description: "A unique identifier of the event."
      orderId: 
        type: "string"
        format: "uuid"
        description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
    title: "Acknowledge Events"
  CancellationError: 
    type: "object"
    required: 
      - "status"
      - "title"
    properties: 
      cancellationStatus: 
        type: "string"
        description: "Indicates the result of the cancellation request."
        enum: 
          - "CANCELLED"
          - "CANCELLATION_REQUEST_DENIED"
      status: 
        type: "integer"
        example: 500
        description: "HTTP code of the returned status."
      title: 
        type: "string"
        example: "Unexpected error"
        description: "Short description of the problem."
    title: "Cancellation Error"
  DeliveryTrackingInfoDisptach: 
    type: "object"
    properties: 
      deliveryPerson: 
        type: "object"
        description: "Information about the person taht was assigned to deliver the order."
        properties: 
          id: 
            type: "string"
            description: "Delivery Person Id given by the `Ordering Application`."
          name: 
            type: "string"
            description: "Delivery Person Name."
          pictureURL: 
            type: "string"
            format: "uri"
            description: "URL to access the photo of the delivery person. Before entering this field, check that the parties allow data to be shared according to data disclosure laws and rules."
      eta: 
        type: "object"
        description: "Estimate Times of Pickup and Delivery."
        properties: 
          deliveryEtaDatetime: 
            type: "string"
            format: "date-time"
            description: "Delivery Eta Datetime. Informs the date and time the delivery person is expected to arrive at the consumer's address for order delivery. \n\n(UTC date-time in ISO timestamp format)."
          deliveryEtaInMinutes: 
            type: "integer"
            description: "Delivery Eta in **minutes**. Informs how many minutes it will take the delivery person to arrive at the consumer's address for order delivery."
          maxDeliveryTime: 
            type: "string"
            format: "date-time"
            description: "Maximum Date and Time for delivery. This time should not exceed the delivery time limit given in the order request. \n\n(UTC date-time in ISO timestamp format)."
      event: 
        type: "object"
        description: "The delivery last known event."
        properties: 
          datetime: 
            type: "string"
            format: "date-time"
            description: "Date and time when the event ocurred. \n\n(UTC date-time in ISO timestamp format)."
          message: 
            type: "string"
            description: "Free message. It should be used to provide more detailed information."
          type: 
            type: "string"
            description: "The current delivery event."
            enum: 
              - "DELIVERY_ONGOING"
              - "ARRIVED_AT_CUSTOMER"
              - "ORDER_DELIVERED"
              - "CANCELLED"
        required: 
          - "datetime"
          - "type"
      externalTrackingURL: 
        type: "string"
        format: "uri"
        description: "External URL, provided by the logistics service to track the delivery on a specific page. Example: Real-time map view, or delivery timeline."
      problem: 
        type: "object"
        description: "In the event of a delivery problem, it states the last known reason."
        properties: 
          datetime: 
            type: "string"
            format: "date-time"
            description: "Date and time when the problem ocurred. \n\n(UTC date-time in ISO timestamp format)."
          message: 
            type: "string"
            description: "Free message. It should be used to provide more detailed information."
          reason: 
            type: "string"
            description: "Problem reason."
            enum: 
              - "DELIVERYPERSON_OCCURRENCE"
              - "PAYMENT_PROBLEMS"
              - "WRONG_PRODUCT_OR_ITEM"
              - "ORDER_DELAYED"
              - "ORDER_DAMAGED_OR_VIOLATED"
              - "CUSTOMER_DID_NOT_PLACE_ORDER"
              - "CUSTOMER_ADDRESS_UNKNOWN"
              - "ORDER_MISSING_ITEMS"
              - "NOBODY_TO_RECEIVE"
              - "DELIVERYPERSON_WAITING_PAYMENT_FOR_ALREADY_PAID_ORDER"
              - "ORDER_DELIVERED_WITHOUT_PAYMENT"
              - "FRAUD_OR_THEFT"
        required: 
          - "datetime"
          - "reason"
      vehicle: 
        type: "object"
        description: "The vehicle that will be used for this delivery."
        properties: 
          licencePlate: 
            type: "string"
            description: "Licence plate of the vehicle user for the delivery."
          type: 
            type: "array"
            description: "Vehicle Type"
            items: 
              type: "string"
              enum: 
                - "MOTORBIKE_BAG"
                - "MOTORBIKE_BOX"
                - "CAR"
                - "BICYCLE"
                - "SCOOTER"
                - "VUC"
            maxItems: 10
        required: 
          - "type"
    title: "Order Disptach Tracking Info"
  Error: 
    type: "object"
    required: 
      - "status"
      - "title"
    properties: 
      status: 
        type: "integer"
        example: 500
        description: "HTTP code of the returned status."
      title: 
        type: "string"
        example: "Unexpected error"
        description: "Short description of the problem."
  Event: 
    type: "object"
    required: 
      - "createdAt"
      - "eventId"
      - "eventType"
      - "orderId"
      - "orderURL"
    discriminator: "eventType"
    properties: 
      createdAt: 
        type: "string"
        format: "date-time"
        description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
      eventId: 
        type: "string"
        format: "uuid"
        description: "A unique identifier of the event."
      eventType: 
        type: "string"
        description: "The event type. **[Click here](#operation/pollingEvents)** for definitions of each type."
        enum: 
          - "CREATED"
          - "CONFIRMED"
          - "DISPATCHED"
          - "READY_FOR_PICKUP"
          - "PICKUP_AREA_ASSIGNED"
          - "DELIVERED"
          - "CONCLUDED"
          - "CANCELLATION_REQUESTED"
          - "CANCELLATION_REQUEST_DENIED"
          - "CANCELLED"
          - "ORDER_CANCELLATION_REQUEST"
          - "CANCELLATION_DENIED"
      orderId: 
        type: "string"
        format: "uuid"
      orderURL: 
        type: "string"
        format: "uri"
        description: "The URL to get the order details"
      sourceAppId: 
        type: "string"
        format: "uuid"
        description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."
    title: "Event"
  EventMetadata: 
    allOf: 
      - 
        $ref: "#/definitions/Event"
      - {}
    description: "Metadata"
    x-discriminator-value: "CONCLUDED"
    x-ms-discriminator-value: "CONCLUDED"
  EventMetadataCancel: 
    allOf: 
      - 
        $ref: "#/definitions/Event"
      - 
        type: "object"
      - 
        properties: 
          metadata: 
            type: "object"
            description: "Information related to the Event Type"
            properties: 
              clientId: 
                type: "string"
                description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)."
              code: 
                type: "string"
                description: "Cancelation reason code"
                enum: 
                  - "CONSUMER_CANCELLATION_REQUESTED"
                  - "OTHER_CANCELLATION_REASON"
              reason: 
                type: "string"
                description: "Reason for the cancellation"
            required: 
              - "code"
              - "reason"
    description: "Metadata"
    x-discriminator-value: "CANCELLED_DENIED"
    x-ms-discriminator-value: "CANCELLED_DENIED"
  EventMetadataConfirm: 
    allOf: 
      - 
        $ref: "#/definitions/Event"
      - 
        type: "object"
      - 
        properties: 
          metadata: 
            type: "object"
            description: "Information related to the Event Type"
            properties: 
              clientId: 
                type: "string"
                description: "The ID of the client system that generated the action that resulted in this event (to be used with application with multiple stations)"
    description: "Metadata"
    x-discriminator-value: "CONFIRMED"
    x-ms-discriminator-value: "CONFIRMED"
  EventMetadataPickup: 
    allOf: 
      - 
        $ref: "#/definitions/Event"
      - 
        type: "object"
      - 
        properties: 
          metadata: 
            type: "object"
            description: "Information related to the Event Type"
            properties: 
              pickupArea: 
                type: "string"
                description: "Information about the pickup area that the merchant needs to deliver the order. Eg: Parking Lot Number"
            required: 
              - "pickupArea"
    description: "Metadata"
    x-discriminator-value: "PICKUP_AREA_ASSIGNED"
    x-ms-discriminator-value: "PICKUP_AREA_ASSIGNED"
  Order: 
    type: "object"
    required: 
      - "createdAt"
      - "customer"
      - "displayId"
      - "id"
      - "items"
      - "merchant"
      - "orderTiming"
      - "payments"
      - "preparationStartDateTime"
      - "total"
      - "type"
    properties: 
      createdAt: 
        type: "string"
        format: "date-time"
        description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
      customer: 
        type: "object"
        description: "Customer related information."
        properties: 
          documentNumber: 
            type: "string"
            description: "Customer document. This document is mandatory for dealing with tax issues."
          id: 
            type: "string"
            format: "uuid"
            description: "A unique identifier related to the consumer. If the Ordering Application does not have an Id for the customer, this Id can be generated when creating the order. "
          name: 
            type: "string"
            description: "Customer's name."
          ordersCountOnMerchant: 
            type: "number"
            format: "double"
            description: "Total number of orders that the customer already placed within the merchant."
          phone: 
            type: "object"
            description: "Customer's phone. Here you can enter the customer's phone number directly (provided that the customer has given permission for this data to be shared, according to local policies) or another phone number (such as the ordering application's call center phone number) where the merchant can communicate about order issues that affect the customer (such as health issues)."
            properties: 
              extension: 
                type: "string"
              number: 
                type: "string"
            required: 
              - "number"
        required: 
          - "documentNumber"
          - "id"
          - "name"
          - "ordersCountOnMerchant"
          - "phone"
      delivery: 
        type: "object"
        description: "Information for DELIVERY orders. Required if the chosen `type` is `DELIVERY`."
        properties: 
          deliveredBy: 
            type: "string"
            enum: 
              - "MERCHANT"
              - "MARKETPLACE"
          deliveryAddress: 
            type: "object"
            description: "The address to which the order will be delivered."
            properties: 
              city: 
                type: "string"
                example: "São Paulo"
                description: "City name."
              complement: 
                type: "string"
                example: "BL 02 AP 31"
                description: "Address complement."
              coordinates: 
                type: "object"
                properties: 
                  latitude: 
                    type: "number"
                    format: "float"
                    example: -23.54823
                    description: "Latitude in degrees. Values are restricted to the range [[-90, 90]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                  longitude: 
                    type: "number"
                    format: "float"
                    example: -46.63632
                    description: "Longitude in degrees. Values are restricted to the range [[-180, 180]].\n\n\n\nThe precision should be **at least 5 double places (multipleOf: 0.00001)**."
                required: 
                  - "latitude"
                  - "longitude"
              country: 
                type: "string"
                example: "BR"
                description: "Two-letter [ISO 3166-1 alpha-2](https://www.iso.org/standard/72482.html) country code."
                pattern: "^[A-Z]{2}$"
              district: 
                type: "string"
                example: "Moema"
                description: "Neighborhood or District."
              formattedAddress: 
                type: "string"
                example: "Plaza Avenue, 100, BL 02 AP 31, Moema - São Paulo, SP - Brazil"
                description: "Full Formated Address Text"
              number: 
                type: "string"
                example: "100"
                description: "Street number."
              postalCode: 
                type: "string"
                example: "20111-000"
                description: "Postal Code"
              reference: 
                type: "string"
                example: "Yellow House"
                description: "Address reference."
              state: 
                type: "string"
                example: "BR-SP"
                description: "State or country subdivision. It is recommended (but not required) that you use the [ISO 3166-2](https://www.iso.org/standard/72483.html) representation. "
              street: 
                type: "string"
                example: "Plaza Avenue"
                description: "Street name."
            required: 
              - "city"
              - "coordinates"
              - "country"
              - "district"
              - "formattedAddress"
              - "number"
              - "postalCode"
              - "state"
              - "street"
          deliveryDateTime: 
            type: "string"
            format: "date-time"
            description: "Delivery date. The date time that the delivery actually took place. \n\n(UTC date-time in ISO timestamp format)."
          estimatedDeliveryDateTime: 
            type: "string"
            format: "date-time"
            description: "Estimated delivery date and time. The same date showed to the customer, in the **Ordering Application** interface. \n\n(UTC date-time in ISO timestamp format)."
        required: 
          - "deliveredBy"
          - "deliveryAddress"
          - "estimatedDeliveryDateTime"
      discounts: 
        type: "array"
        description: "Any discounts that may apply."
        items: 
          type: "object"
          properties: 
            amount: 
              type: "object"
              description: "Amount value of the discount."
              allOf: 
                - 
                  $ref: "#/definitions/Price"
            sponsorshipValues: 
              type: "array"
              description: "Values sponsored by either party. The sum of the amounts listed in this atribute must match the value informed in the `amount` atribute above."
              items: 
                type: "object"
                properties: 
                  amount: 
                    type: "object"
                    description: "Discount amount given by the sponsor."
                    allOf: 
                      - 
                        $ref: "#/definitions/Price"
                  name: 
                    type: "string"
                    enum: 
                      - "MARKETPLACE"
                      - "MERCHANT"
                required: 
                  - "amount"
                  - "name"
            target: 
              type: "string"
              enum: 
                - "CART"
                - "DELIVERY_FEE"
                - "ITEM"
            targetId: 
              type: "string"
              description: "Only mandatory for `target` = `ITEM`."
          required: 
            - "amount"
            - "sponsorshipValues"
            - "target"
      displayId: 
        type: "string"
        description: "Order Id shown in the **Ordering Application** interface for the customer."
      extraInfo: 
        type: "string"
        description: "Extra information, if necessary."
      id: 
        type: "string"
        format: "uuid"
        description: "The unique identifier of the order. The order ID is generated by the **Ordering Application**."
      indoor: 
        type: "object"
        description: "Information for INDOOR orders. Required if the chosen `type` is `INDOOR`."
        properties: 
          indoorDateTime: 
            type: "string"
            format: "date-time"
            description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
          mode: 
            type: "string"
            description: "Indoor mode identifier:\n\n- `DEFAULT`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant without a specific location.\n\n- `PLACE`: Used for orders placed in the **Ordering Application** to be consumed inside the merchant at a specific location already specified, such as a **table** or a **counter**."
            enum: 
              - "DEFAULT"
              - "PLACE"
          place: 
            type: "string"
            description: "Place identifier (Required if mode is `PLACE`)"
        required: 
          - "indoorDateTime"
          - "mode"
      items: 
        type: "array"
        description: "Order items."
        items: 
          type: "object"
          properties: 
            ean: 
              type: "string"
              description: "EAN is the barcode standard used on items."
            externalCode: 
              type: "string"
              description: "External product code."
            id: 
              type: "string"
              format: "uuid"
              description: "A unique identifier of the item."
            index: 
              type: "integer"
              description: "Item's position."
            name: 
              type: "string"
              description: "Product name"
            options: 
              type: "array"
              description: "Options related to the item."
              items: 
                type: "object"
                properties: 
                  ean: 
                    type: "string"
                    description: "EAN is the barcode standard used on items."
                  externalCode: 
                    type: "string"
                    description: "External product code."
                  id: 
                    type: "string"
                    format: "uuid"
                    description: "A unique identifier of the item."
                  index: 
                    type: "integer"
                    description: "Option's position."
                  name: 
                    type: "string"
                    description: "Options name"
                  quantity: 
                    type: "number"
                    format: "double"
                  specialInstructions: 
                    type: "string"
                    description: "More instructions, if needed."
                  totalPrice: 
                    type: "object"
                    description: "Total Price of the option. (quantity * unitPrice)"
                    allOf: 
                      - 
                        $ref: "#/definitions/Price"
                  unit: 
                    type: "string"
                    description: "Measure unit of the item."
                  unitPrice: 
                    type: "object"
                    description: "Price per unit."
                    allOf: 
                      - 
                        $ref: "#/definitions/Price"
                required: 
                  - "externalCode"
                  - "id"
                  - "name"
                  - "quantity"
                  - "totalPrice"
                  - "unit"
                  - "unitPrice"
            optionsPrice: 
              type: "object"
              description: "Pricing options."
              allOf: 
                - 
                  $ref: "#/definitions/Price"
            quantity: 
              type: "number"
              format: "double"
              description: "Amount of items.\n\n > Use fractional values for quantities smaller than the unit of measure:\n > Example: 500 grams = 0.5 KG"
            specialInstructions: 
              type: "string"
              description: "Special instructions about the items."
            totalPrice: 
              type: "object"
              description: "Total Price of the item. (quantity * unitPrice + optionsPrice)"
              allOf: 
                - 
                  $ref: "#/definitions/Price"
            unit: 
              type: "string"
              example: "KG"
              description: "Item's Unit of Measurement.\n\nPossible values:  \n- `UN` - Unit  \n- `KG` - Kilogram  \n- `L` - Liter  \n- `OZ` - Ounce  \n- `LB` - Pound  \n- `GAL` - Gallon  \n\n> Use fractional values for quantities smaller than the unit of measure:\n> Example: 500 grams = 0.5 KG\n"
              enum: 
                - "UN"
                - "KG"
                - "L"
                - "OZ"
                - "LB"
                - "GAL"
            unitPrice: 
              type: "object"
              description: "Price per unit."
              allOf: 
                - 
                  $ref: "#/definitions/Price"
          required: 
            - "externalCode"
            - "id"
            - "name"
            - "quantity"
            - "totalPrice"
            - "unit"
            - "unitPrice"
      lastEvent: 
        type: "string"
        description: "The last valid event polled (whether acknowledged or not) or sent via webhook. **[Click here](#operation/pollingEvents)** for definitions of each type."
        enum: 
          - "CREATED"
          - "CONFIRMED"
          - "DISPATCHED"
          - "READY_FOR_PICKUP"
          - "PICKUP_AREA_ASSIGNED"
          - "DELIVERED"
          - "CONCLUDED"
          - "CANCELLATION_REQUESTED"
          - "CANCELLATION_REQUEST_DENIED"
          - "CANCELLED"
          - "ORDER_CANCELLATION_REQUEST"
          - "CANCELLATION_DENIED"
      merchant: 
        type: "object"
        example: "Pizza Plaza"
        description: "Merchant information."
        properties: 
          id: 
            type: "string"
            example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            description: "Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  \nThis id must be generated by the merchant's **`Software Service`**.\n\n> To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  \n> `Merchant Document + uuid`\n\n> If this is not possible, it is recommended to at least use a uuid."
            minLength: 36
            maxLength: 100
          name: 
            type: "string"
            description: "Merchant Public Name"
        required: 
          - "id"
          - "name"
      orderTiming: 
        type: "string"
        description: "Order Timing. Indicates whether the ORDER will have immediate or scheduled delivery."
        enum: 
          - "INSTANT"
          - "SCHEDULED"
      otherFees: 
        type: "array"
        description: "Other fees that may apply."
        items: 
          type: "object"
          properties: 
            name: 
              type: "string"
              description: "Name related to the other fees."
            observation: 
              type: "string"
              description: "Any extra comments."
            price: 
              type: "object"
              description: "The fee price"
              allOf: 
                - 
                  $ref: "#/definitions/Price"
            receivedBy: 
              type: "string"
              enum: 
                - "MARKETPLACE"
                - "MERCHANT"
                - "LOGISTIC_SERVICES"
            receiverDocument: 
              type: "string"
              description: "Mandatory for marketplace."
            type: 
              type: "string"
              enum: 
                - "DELIVERY_FEE"
                - "SERVICE_FEE"
                - "TIP"
          required: 
            - "name"
            - "price"
            - "receivedBy"
            - "type"
      payments: 
        type: "object"
        description: "All the description of the payment, such as methods, pre-payments, change, etc."
        properties: 
          methods: 
            type: "array"
            description: "The payment method used. Whether it was online, on delivery, credit card, voucher, cash, etc."
            items: 
              type: "object"
              properties: 
                brand: 
                  type: "string"
                  description: "Indicates the brand of the card selected in the `method` field.\n\nThis field must only be filled in if `type` is `PREPAID` and `method` is `CREDIT`, `DEBIT`, `CREDIT_DEBIT`, `MEAL_VOUCHER` or `FOOD_VOUCHER`.\n\nIf `OTHER` is chosen, it is recommended that you describe the brand name in the `methodInfo` field."
                  enum: 
                    - "VISA"
                    - "MASTERCARD"
                    - "DINERS"
                    - "AMEX"
                    - "HIPERCARD"
                    - "ELO"
                    - "AURA"
                    - "DISCOVER"
                    - "VR_BENEFICIOS"
                    - "SODEXO"
                    - "TICKET"
                    - "GOOD_CARD"
                    - "BANESCARD"
                    - "SOROCARD"
                    - "POLICARD"
                    - "VALECARD"
                    - "AGICARD"
                    - "JCB"
                    - "CREDSYSTEM"
                    - "CABAL"
                    - "GREEN_CARD"
                    - "VEROCHEQUE"
                    - "AVISTA"
                    - "OTHER"
                changeFor: 
                  type: "number"
                  format: "double"
                  description: "Indicates the total that will be paid in cash by the customer and that should be considered for the calculation of the change   \n(ex. customer will pay a $43 order with a $50 bill. Then 50.00 must be entered.). \n\nOnly mandatory when `method` is `CASH`."
                currency: 
                  type: "string"
                  example: "BRL"
                  description: "The 3-letter ISO 4217 currency code."
                method: 
                  type: "string"
                  enum: 
                    - "CREDIT"
                    - "DEBIT"
                    - "MEAL_VOUCHER"
                    - "FOOD_VOUCHER"
                    - "DIGITAL_WALLET"
                    - "PIX"
                    - "CASH"
                    - "CREDIT_DEBIT"
                    - "COUPON"
                    - "REDEEM"
                    - "PREPAID_REDEEM"
                    - "OTHER"
                methodInfo: 
                  type: "string"
                  description: "Additional information regarding the payment method.  \nIt can be used to indicate some useful information of the chosen payment method, such as the name of the wallet, or an authorization number.  \n\nThis field can be used for any `method` entered, but it is highly recommended to fill it in when the chosen `method` is `OTHER`."
                type: 
                  type: "string"
                  description: "`PREPAID` if the payment was made through some platform, or `PENDING` if it going to be paid on delivery or in cash, for example."
                  enum: 
                    - "PREPAID"
                    - "PENDING"
                value: 
                  type: "number"
                  format: "double"
                  description: "Price value. 4 doubles places are accepted"
              required: 
                - "currency"
                - "method"
                - "type"
                - "value"
          pending: 
            type: "number"
            format: "double"
            description: "Amount that is still to be paid."
          prepaid: 
            type: "number"
            format: "double"
            description: "Amount paid in advance."
        required: 
          - "methods"
          - "pending"
          - "prepaid"
      preparationStartDateTime: 
        type: "string"
        format: "date-time"
        description: "Suggestion for the preparation start time after Order creation. This can be used by the **Ordering Application** to inform the merchant to delay the start of the preparation for any reason. Default is the same time as the order creation time. \n\n(UTC date-time in ISO timestamp format)."
      schedule: 
        type: "object"
        description: "Information for scheduled orders. Required if `orderTiming` is `SCHEDULED`."
        properties: 
          scheduledDateTimeEnd: 
            type: "string"
            format: "date-time"
            description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
          scheduledDateTimeStart: 
            type: "string"
            format: "date-time"
            description: "Date and time for when the order is ready. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        required: 
          - "scheduledDateTimeEnd"
          - "scheduledDateTimeStart"
      sendDelivered: 
        type: "boolean"
        description: "This field indicates whether it is necessary for the `Software Service` to make a request to the [POST /v1/orders/{orderId}/delivered](#operation/orderDelivered) endpoint to indicate to the `Ordering Application` that the order has been delivered to the client.\n\n`true`: Indicates that the `Ordering Application` is waiting for a request.\n\n`false` or `not informed`: It is not required to make a request."
      sourceAppId: 
        type: "string"
        format: "uuid"
        description: "This field must be filled in with the AppId of the **Ordering Application** that originated the order. This field is to help the applications that will work as a Hub, intermediating the requests from the **Ordering Application** with the **Software Service**."
      takeout: 
        type: "object"
        description: "Information for TAKEOUT orders. Required if the chosen `type` is `TAKEOUT`."
        properties: 
          mode: 
            type: "string"
            enum: 
              - "DEFAULT"
              - "PICKUP_AREA"
          takeoutDateTime: 
            type: "string"
            format: "date-time"
            description: "Takeout date and time. It can be calculated by the **Ordering Application** using the average preparation time of the dishes. Default is the same time as order creation time. \n\n(UTC date-time in ISO timestamp format)."
        required: 
          - "mode"
          - "takeoutDateTime"
      total: 
        type: "object"
        description: "Set of fields with the sum of the values previously described in the order."
        properties: 
          discount: 
            type: "object"
            description: "Sum of any discounts that may be listed in the `discounts` attribute. If there isn't one, use 0."
            allOf: 
              - 
                $ref: "#/definitions/Price"
          itemsPrice: 
            type: "object"
            description: "Sum of the total price of the items listed in the `items` attribute."
            allOf: 
              - 
                $ref: "#/definitions/Price"
          orderAmount: 
            type: "object"
            description: "The final value of the order (itemsPrice + otherFees - discounts). "
            allOf: 
              - 
                $ref: "#/definitions/Price"
          otherFees: 
            type: "object"
            description: "Sum of the total value of other fees listed in the `otherFees` attribute. If there isn't one, use 0."
            allOf: 
              - 
                $ref: "#/definitions/Price"
        required: 
          - "discount"
          - "itemsPrice"
          - "orderAmount"
          - "otherFees"
      type: 
        type: "string"
        description: "`DELIVERY` - for orders that will be delivered to the customer's address.  \n`TAKEOUT` - orders that will be picked up at the establishment by the customer  \n`INDOOR` - orders that will be consumed inside the establishment."
        enum: 
          - "DELIVERY"
          - "TAKEOUT"
          - "INDOOR"
    title: "Order"
  OrderConfirmed: 
    type: "object"
    required: 
      - "createdAt"
      - "orderExternalCode"
    properties: 
      createdAt: 
        type: "string"
        format: "date-time"
        description: "Order creation date and time. \n\n(UTC date-time in ISO timestamp format)."
      orderExternalCode: 
        type: "string"
        description: "External order code, which can be used by merchant or marketplace."
      preparationTime: 
        type: "integer"
        description: "Indicates an estimate of the preparation time (in minutes) for the order being confirmed."
      reason: 
        type: "string"
        description: "Free field for more information about the order confirmation, such as which employee accepted the order, for example."
    title: "Order Confirmed"
  OrderDispatched: 
    type: "object"
    properties: 
      deliveryTrackingInfo: 
        type: "object"
        description: "Information about the person that was assigned to deliver the order."
        allOf: 
          - 
            $ref: "#/definitions/DeliveryTrackingInfoDisptach"
    title: "Order Dispatched"
  Price: 
    type: "object"
    required: 
      - "currency"
      - "value"
    properties: 
      currency: 
        type: "string"
        example: "BRL"
        description: "The 3-letter ISO 4217 currency code."
      value: 
        type: "number"
        format: "double"
        example: 40
        description: "Price value. 4 doubles places are accepted"
    title: "Price"
  RequestCancelled: 
    type: "object"
    required: 
      - "code"
      - "mode"
      - "reason"
    properties: 
      code: 
        type: "string"
        enum: 
          - "SYSTEMIC_ISSUES"
          - "DUPLICATE_APPLICATION"
          - "UNAVAILABLE_ITEM"
          - "RESTAURANT_WITHOUT_DELIVERY_PERSON"
          - "OUTDATED_MENU"
          - "ORDER_OUTSIDE_THE_DELIVERY_AREA"
          - "BLOCKED_CUSTOMER"
          - "OUTSIDE_DELIVERY_HOURS"
          - "INTERNAL_DIFFICULTIES_OF_THE_RESTAURANT"
          - "RISK_AREA"
          - "DELIVERY_PROBLEM"
      invalidItems: 
        type: "array"
        description: "Items that do not exist in the merchant's inventory."
        items: 
          type: "string"
          format: "uuid"
        maxItems: 100
      mode: 
        type: "string"
        enum: 
          - "AUTO"
          - "MANUAL"
      outOfStockItems: 
        type: "array"
        description: "Items that are not in the merchant's inventory."
        items: 
          type: "string"
          format: "uuid"
        maxItems: 100
      reason: 
        type: "string"
        description: "Open text field indicating the reason for the cancellation."
    title: "Cancellation Request Accepted"
  RequestDenied: 
    type: "object"
    required: 
      - "code"
      - "reason"
    properties: 
      code: 
        type: "string"
        enum: 
          - "DISH_ALREADY_DONE"
          - "OUT_FOR_DELIVERY"
      reason: 
        type: "string"
        description: "Open text field indicating the reason for the cancellation."
    title: "Cancellation Request Denied"
  SandboxRegister: 
    type: "object"
    required: 
      - "eventReceptionMode"
      - "merchant"
    properties: 
      eventReceptionMode: 
        type: "string"
        description: "Indicates the result of the cancellation request."
        enum: 
          - "POLLING"
      merchant: 
        type: "object"
        example: "Pizza Plaza"
        description: "Merchant information."
        properties: 
          id: 
            type: "string"
            example: "22815773000169-dbc7e35a-c936-4665-9e13-eb55eb8b6824"
            description: "Unique Identifier. Identifies the merchant in the different systems that the merchant will communicate.  \nThis id must be generated by the merchant's **`Software Service`**.\n\n> To avoid duplicates between different merchants it is recommended that the software creates the merchantId using:  \n> `Merchant Document + uuid`\n\n> If this is not possible, it is recommended to at least use a uuid."
            minLength: 36
            maxLength: 100
          name: 
            type: "string"
            description: "Merchant Name"
        required: 
          - "id"
          - "name"
    title: "Sandbox Register"
  TokenRequest: 
    type: "object"
    required: 
      - "client_id"
      - "client_secret"
      - "grant_type"
    properties: 
      client_id: 
        type: "string"
        description: "Client identifier provided by the **Ordering Application**."
      client_secret: 
        type: "string"
        description: "Client Secret provided by the **Ordering Application**."
      grant_type: 
        type: "string"
        description: "The OAuth grant type. Currently, the only supported grant type is `client_credentials`."
        enum: 
          - "client_credentials"
    title: "Token Request"
  TokenResponse: 
    type: "object"
    required: 
      - "access_token"
      - "token_type"
    properties: 
      access_token: 
        type: "string"
        description: "A code representing the access token."
      token_type: 
        type: "string"
        description: "The token type. Currently, the only supported type is `bearer`"
        enum: 
          - "bearer"
      expires_in: 
        type: "number"
        format: "double"
        description: "The token expiration time in seconds"
    title: "Token Request"
x-components: 
  responses: 
    Accepted: 
      description: "Request has been accepted for processing."
    AccessDenied: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "Authenticated participant request that violates some authorization rule."
    BadRequest: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "Bad Request"
    NotFound: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "The requested resource was not found."
    ServiceUnavailable: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "Service is not currently available. Requested service may be under maintenance or outside the operating window."
    Unauthorized: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "Request lacks valid authentication credentials for the target resource"
    UnprocessableEntity: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/Error"
      description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
    UnprocessableEntityOrderCancellation: 
      content: 
        application/problem+json: 
          schema: 
            $ref: "#/definitions/CancellationError"
      description: "Server understands the content type of the request entity, and the syntax of the request entity is correct, but it was unable to process the contained instructions. (Check if the instruction has not been sent before.)"
  requestBodies: 
    CancelDenied: 
      content: 
        application/json: 
          schema: 
            $ref: "#/definitions/RequestDenied"
      description: "Request for order cancellation has been denied."
      required: true
    CancelRequest: 
      content: 
        application/json: 
          schema: 
            $ref: "#/definitions/RequestCancelled"
      required: true
x-destination: "$backend"
x-timeout: null
x-api-broken: false
x-interceptors: 
  1: 
    x-interceptor-position: 1
    x-interceptor-type: "LOG"
    x-interceptor-content: "{\"acceptedTerms\":true,\"encryptContent\":false,\"encryptPathAndParameters\":false,\"ignoreBodyValidationMultiPartFormData\":false}"
    x-interceptor-execution-point: "FIRST"
    x-interceptor-status: "REFERENCE"
  2: 
    x-interceptor-position: 2
    x-interceptor-type: "HEADER"
    x-interceptor-content: "{\"headerList\":[{\"name\":\"issuer\",\"tokenType\":\"CUSTOM\",\"attribute\":\"3375eec9-f27f-4917-b710-8914816742ce\"}],\"ignoreBodyValidationMultiPartFormData\":false}"
    x-interceptor-execution-point: "FIRST"
    x-interceptor-status: "REFERENCE"
  3: 
    x-interceptor-position: 3
    x-interceptor-type: "LOG"
    x-interceptor-content: "{\"acceptedTerms\":true,\"encryptContent\":false,\"encryptPathAndParameters\":false,\"ignoreBodyValidationMultiPartFormData\":false}"
    x-interceptor-execution-point: "FIRST"
    x-interceptor-status: "REFERENCE"
  4: 
    x-interceptor-position: 4
    x-interceptor-type: "LOG"
    x-interceptor-content: "{\"acceptedTerms\":true,\"encryptContent\":false,\"encryptPathAndParameters\":false,\"ignoreBodyValidationMultiPartFormData\":false}"
    x-interceptor-execution-point: "SECOND"
    x-interceptor-status: "REFERENCE"
x-access-token-expires-in: null
x-life-cycle: "DRAFT"
x-resources: 
  /orders: 
    x-resource-description: "Retrieve the full order information.\n\n**See:** [Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersDetails)"
    x-destination: null
    x-interceptors: {}
    x-timeout: null
    x-api-broken: false
  /events: 
    x-resource-description: "Endpoints related to Order Polling.\n\n**See:** [Open Delivery Documentation](https://abrasel-nacional.github.io/docs/#tag/ordersPolling)"
    x-destination: null
    x-interceptors: {}
    x-timeout: null
    x-api-broken: false
  /sandbox: 
    x-resource-description: "Sandbox exclusive endpoints not present in the official Open Delivery documentation. \n\nThese endpoints should be used to **SIMULATE** actions that would be performed by the **`Ordering Application`**."
    x-destination: null
    x-interceptors: {}
    x-timeout: null
    x-api-broken: false
x-servers: 
  5: "https://api.opendelivery.com.br/"
